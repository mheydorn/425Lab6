        CPU     8086
        ORG     0h
InterruptVectorTable:
        ; Internal x86 Interrupts:
        dd      0 ; Reserved (Div err)  ; Int 00h
        dd      0 ; Reserved (Step)     ; Int 01h
        dd      0 ; Reserved (NMI)      ; Int 02h
        dd      0 ; Reserved (Break)    ; Int 03h
        dd      0 ; Reserved (Overflow) ; Int 04h
        dd      0                       ; Int 05h
        dd      0                       ; Int 06h
        dd      0                       ; Int 07h
        ; Hardware Interrupts:
        dd      resetISR ; Reset               ; Int 08h (IRQ 0)
        dd      tickISR ; Tick                ; Int 09h (IRQ 1)
        dd      keyboardISR ; Keyboard            ; Int 0Ah (IRQ 2)
        dd      0 ; Simptris Game Over  ; Int 0Bh (IRQ 3)
        dd      0 ; Simptris New Piece  ; Int 0Ch (IRQ 4)
        dd      0 ; Simptris Received   ; Int 0Dh (IRQ 5)
        dd      0 ; Simptris Touchdown  ; Int 0Eh (IRQ 6)
        dd      0 ; Simptris Clear      ; Int 0Fh (IRQ 7)
        ; Software Interrupts:
        dd      0 ; Reserved (PC BIOS)  ; Int 10h
        dd      0                       ; Int 11h
        dd      0                       ; Int 12h
        dd      0                       ; Int 13h
        dd      0                       ; Int 14h
        dd      0                       ; Int 15h
        dd      0                       ; Int 16h
        dd      0                       ; Int 17h
        dd      0                       ; Int 18h
        dd      0                       ; Int 19h
        dd      0                       ; Int 1Ah
        dd      0                       ; Int 1Bh
        dd      0                       ; Int 1Ch
        dd      0                       ; Int 1Dh
        dd      0                       ; Int 1Eh
        dd      0                       ; Int 1Fh
        dd      0                       ; Int 20h
        dd      0 ; Reserved (DOS)      ; Int 21h
        dd      0 ; Simptris Services   ; Int 22h
        dd      0                       ; Int 23h
        dd      0                       ; Int 24h
        dd      0                       ; Int 25h
        dd      0                       ; Int 26h
        dd      0                       ; Int 27h
        dd      0                       ; Int 28h
        dd      0                       ; Int 29h
        dd      0                       ; Int 2Ah
        dd      0                       ; Int 2Bh
        dd      0                       ; Int 2Ch
        dd      0                       ; Int 2Dh
        dd      0                       ; Int 2Eh
        dd      0                       ; Int 2Fh
KeyBuffer:                              ; Address 0xC0
        dw      0
NewPieceType:                           ; Address 0xC2
        dw      0
NewPieceID:                             ; Address 0xC4
        dw      0
NewPieceOrientation:                    ; Address 0xC6
        dw      0
NewPieceColumn:                         ; Address 0xC8
        dw      0
TouchdownID:                            ; Address 0xCA
	dw	0
ScreenBitMap0:                          ; Address 0xCC
        dw      0
ScreenBitMap1:
        dw      0
ScreenBitMap2:
        dw      0
ScreenBitMap3:
        dw      0
ScreenBitMap4:
        dw      0
ScreenBitMap5:
        dw      0
TIMES   100h-($-$$) db  0               ; Fill up to (but not including) address 100h with 0
	jmp	main
; This file contains support routines for 32-bit on the 8086.
; It is intended for use code generated by the C86 compiler.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
SR_asldiv:			; l1 /= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_ldiv
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslmod:			; l1 %= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lmod
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslmul:			; l1 *= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lmul
	add	sp,8
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslshl:			; l1 <<= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lshl
	add	sp,8
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslshr:			; l1 >>= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lshr
	add	sp,8
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret


SR_asuldiv:			; u1 /= u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_uldiv
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asilmod:			; u1 %= u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ilmod
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asulmul:			; u1 *= u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ulmul
	add	sp,8
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asulshl:			; u1 << u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ulshl
	add	sp,8
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asulshr:			; u1 >> u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ulshr
	add	sp,8
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret


; Main 32-bit routines begin here:

SR_ldiv:	; N_LDIV@
	pop    cx
	push   cs
	push   cx
	; LDIV@
	xor    cx,cx
	jmp    LSR_01
SR_uldiv:	; N_LUDIV@
	pop    cx
	push   cs
	push   cx
	; F_LUDIV@
	mov    cx,0001
	jmp    LSR_01
SR_lmod:	; N_LMOD@
	pop    cx
	push   cs
	push   cx
	; F_LMOD@
	mov    cx,0002
	jmp    LSR_01
SR_ilmod:	; N_LUMOD@
	pop    cx
	push   cs
	push   cx
	; LUMOD@
	mov    cx,0003
LSR_01:
	push   bp
	push   si
	push   di
	mov    bp,sp
	mov    di,cx
	mov    ax,[bp+0Ah]
	mov    dx,[bp+0Ch]
	mov    bx,[bp+0Eh]
	mov    cx,[bp+10h]
	or     cx,cx
	jne    LSR_02
	or     dx,dx
	je     LSR_10
	or     bx,bx
	je     LSR_10
LSR_02:
	test   di,0001
	jne    LSR_04
	or     dx,dx
	jns    LSR_03
	neg    dx
	neg    ax
	sbb    dx,0000
	or     di,000Ch
LSR_03:
	or     cx,cx
	jns    LSR_04
	neg    cx
	neg    bx
	sbb    cx,0000
	xor    di,0004
LSR_04:
	mov    bp,cx
	mov    cx,0020h
	push   di
	xor    di,di
	xor    si,si
LSR_05:
	shl    ax,1
	rcl    dx,1
	rcl    si,1
	rcl    di,1
	cmp    di,bp
	jb     LSR_07
	ja     LSR_06
	cmp    si,bx
	jb     LSR_07
LSR_06:
	sub    si,bx
	sbb    di,bp
	inc    ax
LSR_07:
	loop   LSR_05
	pop    bx
	test   bx,0002
	je     LSR_08
	mov    ax,si
	mov    dx,di
	shr    bx,1
LSR_08:
	test   bx,0004h
	je     LSR_09
	neg    dx
	neg    ax
	sbb    dx,0000
LSR_09:
	pop    di
	pop    si
	pop    bp
	retf   0008
LSR_10:
	div    bx
	test   di,0002
	je     LSR_11
	xchg   dx,ax
LSR_11:
	xor    dx,dx
	jmp    LSR_09
SR_lshl:	; N_LXLSH@
SR_ulshl:
	; r = a << b
	pop    bx
	push   cs
	push   bx

	push   bp
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx

	mov    ax, [bp+6]	; pop loword(a)
	mov    dx, [bp+8]	; pop hiword(a)
	mov    cx, [bp+10]	; pop word(b)
	
	; LXLSH@
	cmp    cl,10h
	jnb    LSR_12
	mov    bx,ax
	shl    ax,cl
	shl    dx,cl
	neg    cl
	add    cl,10h
	shr    bx,cl
	or     dx,bx
	pop    cx
	pop    bp
	retf
LSR_12:
	sub    cl,10h
	xchg   dx,ax
	xor    ax,ax
	shl    dx,cl
	pop    cx
	pop    bp
	retf
SR_lshr:	; N_LXRSH@
	; r = a >> b
	pop    bx
	push   cs
	push   bx

	push   bp
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx

        mov    ax, [bp+6]	; pop loword(a)
	mov    dx, [bp+8]	; pop hiword(a)
	mov    cx, [bp+10]	; pop word(b)
	
	; LXRSH@
	cmp    cl,10h
	jnb    LSR_13
	mov    bx,dx
	shr    ax,cl
	sar    dx,cl
	neg    cl
	add    cl,10h
	shl    bx,cl
	or     ax,bx
	pop    cx
	pop    bp
	retf
LSR_13:
	sub    cl,10h
	xchg   dx,ax
	cwd
	sar    ax,cl
	pop    cx
	pop    bp
	retf
SR_ulshr:	; N_LXURSH@
	; r = a >> b
	pop    bx
	push   cs
	push   bx

	push   bp
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx

        mov    ax, [bp+6]	; pop loword(a)
	mov    dx, [bp+8]	; pop hiword(a)
	mov    cx, [bp+10]	; pop word(b)
	
	; LXURSH@
	cmp    cl,10h
	jnb    LSR_14
	mov    bx,dx
	shr    ax,cl
	shr    dx,cl
	neg    cl
	add    cl,10h
	shl    bx,cl
	or     ax,bx
	pop    cx
	pop    bp
	retf
LSR_14:
	sub    cl,10h
	xchg   dx,ax
	xor    dx,dx
	shr    ax,cl
	pop    cx
	pop    bp
	retf
SR_lmul:	; N_LXMUL@
SR_ulmul:
	; r = a * b
	push   bp
	push   si
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx
	push   bx

        mov    bx, [bp+6]	; pop loword(a)
	mov    cx, [bp+8]	; pop hiword(a)
	mov    ax, [bp+10]	; pop loword(b)
	mov    dx, [bp+12]	; pop hiword(b)
	
	xchg   si,ax
	xchg   dx,ax
	test   ax,ax
	je     LSR_15
	mul    bx
LSR_15:
	jcxz   LSR_16
	xchg   cx,ax
	mul    si
	add    ax,cx
LSR_16:
	xchg   si,ax
	mul    bx
	add    dx,si
	pop    bx
	pop    cx
	pop    si
	pop    bp
	ret

; Generated by c86 (BYU-NASM) 5.1 (beta) from clib.c
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
new_line:
	db	13,10,36
	ALIGN	2
signalEOI:
	jmp	L_clib_1
L_clib_2:
	mov	al, 0x20
	out	0x20, al
	mov	sp, bp
	pop	bp
	ret
L_clib_1:
	push	bp
	mov	bp, sp
	jmp	L_clib_2
	ALIGN	2
exit:
	jmp	L_clib_4
L_clib_5:
	mov	ah, 4Ch
	mov	al, [bp+4]
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_4:
	push	bp
	mov	bp, sp
	jmp	L_clib_5
	ALIGN	2
print:
	jmp	L_clib_7
L_clib_8:
	mov	ah, 40h
	mov	bx, 1
	mov	cx, [bp+6]
	mov	dx, [bp+4]
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_7:
	push	bp
	mov	bp, sp
	jmp	L_clib_8
	ALIGN	2
printChar:
	jmp	L_clib_10
L_clib_11:
	mov	ah, 2
	mov	dl, [bp+4]
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_10:
	push	bp
	mov	bp, sp
	jmp	L_clib_11
	ALIGN	2
printNewLine:
	jmp	L_clib_13
L_clib_14:
	mov	ah, 9
	mov	dx, new_line
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_13:
	push	bp
	mov	bp, sp
	jmp	L_clib_14
	ALIGN	2
printString:
	jmp	L_clib_16
L_clib_17:
	xor	si,si
	mov	bx, [bp+4]
	jmp	printString2
	printString1:
	inc	si
	printString2:
	cmp	byte [bx+si],0
	jne	printString1
	mov	dx, bx
	mov	cx, si
	mov	ah, 40h
	mov	bx, 1
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_16:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_clib_17
	ALIGN	2
printInt:
	jmp	L_clib_19
L_clib_20:
	mov	word [bp-2], 0
	mov	word [bp-4], 10000
	cmp	word [bp+4], 0
	jge	L_clib_21
	mov	byte [bp-10], 45
	inc	word [bp-2]
	mov	ax, word [bp+4]
	neg	ax
	mov	word [bp+4], ax
L_clib_21:
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_clib_22
	mov	word [bp-4], 1
	jmp	L_clib_23
L_clib_22:
	jmp	L_clib_25
L_clib_24:
	mov	ax, word [bp-4]
	cwd
	mov	cx, 10
	idiv	cx
	mov	word [bp-4], ax
L_clib_25:
	mov	ax, word [bp+4]
	cwd
	idiv	word [bp-4]
	test	ax, ax
	je	L_clib_24
L_clib_26:
L_clib_23:
	jmp	L_clib_28
L_clib_27:
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-10]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	mov	ax, dx
	mov	word [bp+4], ax
	mov	ax, word [bp-4]
	cwd
	mov	cx, 10
	idiv	cx
	mov	word [bp-4], ax
	mov	ax, word [bp-4]
	mov	word [bp-4], ax
L_clib_28:
	cmp	word [bp-4], 0
	jg	L_clib_27
L_clib_29:
	push	word [bp-2]
	lea	ax, [bp-10]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_19:
	push	bp
	mov	bp, sp
	sub	sp, 10
	jmp	L_clib_20
	ALIGN	2
printLong:
	jmp	L_clib_31
L_clib_32:
	mov	word [bp-2], 0
	mov	word [bp-6], 51712
	mov	word [bp-4], 15258
	cmp	word [bp+6], 0
	jg	L_clib_33
	jl	L_clib_34
	cmp	word [bp+4], 0
	jae	L_clib_33
L_clib_34:
	mov	byte [bp-17], 45
	inc	word [bp-2]
	mov	ax, word [bp+4]
	mov	dx, word [bp+6]
	neg	ax
	adc	dx, 0
	neg	dx
	mov	word [bp+4], ax
	mov	word [bp+6], dx
L_clib_33:
	mov	ax, word [bp+4]
	mov	dx, word [bp+6]
	or	dx, ax
	jne	L_clib_35
	mov	word [bp-6], 1
	mov	word [bp-4], 0
	jmp	L_clib_36
L_clib_35:
	jmp	L_clib_38
L_clib_37:
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asldiv
L_clib_38:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_ldiv
	or	dx, ax
	je	L_clib_37
L_clib_39:
L_clib_36:
	jmp	L_clib_41
L_clib_40:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_uldiv
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-17]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_lmod
	mov	word [bp+4], ax
	mov	word [bp+6], dx
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asldiv
L_clib_41:
	cmp	word [bp-4], 0
	jg	L_clib_40
	jne	L_clib_43
	cmp	word [bp-6], 0
	ja	L_clib_40
L_clib_43:
L_clib_42:
	push	word [bp-2]
	lea	ax, [bp-17]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_31:
	push	bp
	mov	bp, sp
	sub	sp, 18
	jmp	L_clib_32
	ALIGN	2
printUInt:
	jmp	L_clib_45
L_clib_46:
	mov	word [bp-2], 0
	mov	word [bp-4], 10000
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_clib_47
	mov	word [bp-4], 1
	jmp	L_clib_48
L_clib_47:
	jmp	L_clib_50
L_clib_49:
	mov	ax, word [bp-4]
	xor	dx, dx
	mov	cx, 10
	div	cx
	mov	word [bp-4], ax
L_clib_50:
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	test	ax, ax
	je	L_clib_49
L_clib_51:
L_clib_48:
	jmp	L_clib_53
L_clib_52:
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-10]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	mov	word [bp+4], dx
	mov	ax, word [bp-4]
	xor	dx, dx
	mov	cx, 10
	div	cx
	mov	word [bp-4], ax
L_clib_53:
	mov	ax, word [bp-4]
	test	ax, ax
	jne	L_clib_52
L_clib_54:
	push	word [bp-2]
	lea	ax, [bp-10]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_45:
	push	bp
	mov	bp, sp
	sub	sp, 10
	jmp	L_clib_46
	ALIGN	2
printULong:
	jmp	L_clib_56
L_clib_57:
	mov	word [bp-2], 0
	mov	word [bp-6], 51712
	mov	word [bp-4], 15258
	mov	ax, word [bp+4]
	mov	dx, word [bp+6]
	or	dx, ax
	jne	L_clib_58
	mov	word [bp-6], 1
	mov	word [bp-4], 0
	jmp	L_clib_59
L_clib_58:
	jmp	L_clib_61
L_clib_60:
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asuldiv
L_clib_61:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_uldiv
	or	dx, ax
	je	L_clib_60
L_clib_62:
L_clib_59:
	jmp	L_clib_64
L_clib_63:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_uldiv
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-17]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	push	word [bp-4]
	push	word [bp-6]
	lea	ax, [bp+4]
	push	ax
	call	SR_asilmod
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asuldiv
L_clib_64:
	mov	ax, word [bp-6]
	mov	dx, word [bp-4]
	or	dx, ax
	jne	L_clib_63
L_clib_65:
	push	word [bp-2]
	lea	ax, [bp-17]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_56:
	push	bp
	mov	bp, sp
	sub	sp, 18
	jmp	L_clib_57
	ALIGN	2
printByte:
	jmp	L_clib_67
L_clib_68:
	mov	al, byte [bp+4]
	cbw
	mov	cx, 4
	sar	ax, cl
	and	ax, 15
	mov	byte [bp-1], al
	cmp	byte [bp-1], 9
	jle	L_clib_69
	mov	al, byte [bp-1]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_70
L_clib_69:
	mov	al, byte [bp-1]
	cbw
	add	ax, 48
L_clib_70:
	mov	byte [bp-3], al
	mov	al, byte [bp+4]
	and	al, 15
	mov	byte [bp-1], al
	cmp	byte [bp-1], 9
	jle	L_clib_71
	mov	al, byte [bp-1]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_72
L_clib_71:
	mov	al, byte [bp-1]
	cbw
	add	ax, 48
L_clib_72:
	mov	byte [bp-2], al
	mov	ax, 2
	push	ax
	lea	ax, [bp-3]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_67:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_clib_68
	ALIGN	2
printWord:
	jmp	L_clib_74
L_clib_75:
	mov	word [bp-2], 3
	jmp	L_clib_77
L_clib_76:
	mov	ax, word [bp+4]
	and	ax, 15
	mov	byte [bp-3], al
	cmp	byte [bp-3], 9
	jle	L_clib_80
	mov	al, byte [bp-3]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_81
L_clib_80:
	mov	al, byte [bp-3]
	cbw
	add	ax, 48
L_clib_81:
	mov	si, word [bp-2]
	lea	dx, [bp-7]
	add	si, dx
	mov	byte [si], al
	mov	ax, word [bp+4]
	mov	cx, 4
	sar	ax, cl
	mov	word [bp+4], ax
L_clib_79:
	dec	word [bp-2]
L_clib_77:
	cmp	word [bp-2], 0
	jge	L_clib_76
L_clib_78:
	mov	ax, 4
	push	ax
	lea	ax, [bp-7]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_74:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_clib_75
	ALIGN	2
printDWord:
	jmp	L_clib_83
L_clib_84:
	lea	ax, [bp+4]
	mov	si, ax
	mov	ax, word [si]
	mov	word [bp-6], ax
	lea	ax, [bp+4]
	mov	si, ax
	add	si, 2
	mov	ax, word [si]
	mov	word [bp-8], ax
	mov	word [bp-2], 3
	jmp	L_clib_86
L_clib_85:
	mov	ax, word [bp-6]
	and	ax, 15
	mov	byte [bp-3], al
	cmp	byte [bp-3], 9
	jle	L_clib_89
	mov	al, byte [bp-3]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_90
L_clib_89:
	mov	al, byte [bp-3]
	cbw
	add	ax, 48
L_clib_90:
	mov	dx, word [bp-2]
	add	dx, 4
	mov	si, dx
	lea	dx, [bp-16]
	add	si, dx
	mov	byte [si], al
	mov	ax, word [bp-6]
	mov	cx, 4
	sar	ax, cl
	mov	word [bp-6], ax
	mov	ax, word [bp-8]
	and	ax, 15
	mov	byte [bp-3], al
	cmp	byte [bp-3], 9
	jle	L_clib_91
	mov	al, byte [bp-3]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_92
L_clib_91:
	mov	al, byte [bp-3]
	cbw
	add	ax, 48
L_clib_92:
	mov	si, word [bp-2]
	lea	dx, [bp-16]
	add	si, dx
	mov	byte [si], al
	mov	ax, word [bp-8]
	mov	cx, 4
	sar	ax, cl
	mov	word [bp-8], ax
L_clib_88:
	dec	word [bp-2]
L_clib_86:
	cmp	word [bp-2], 0
	jge	L_clib_85
L_clib_87:
	mov	ax, 8
	push	ax
	lea	ax, [bp-16]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_83:
	push	bp
	mov	bp, sp
	sub	sp, 16
	jmp	L_clib_84

resetISR:
	call myreset
	
tickISR:

	push ax
	push bx
	push cx
	push dx
	push si
	push di
	push bp
	push es
	push ds


	call YKEnterISR

	sti
	call myisr
	call YKTickHandler
	cli
	
	mov	al, 0x20	; Load nonspecific EOI value (0x20) into register al
	out	0x20, al	; Write EOI to PIC (port 0x20)

	call YKExitISR
	
	pop ds
	pop es
	pop bp
	pop di
	pop si
	pop dx
	pop cx
	pop bx
	pop ax

	iret

YKRet:	
	pop cx
	mov	al, 0x20	; Load nonspecific EOI value (0x20) into register al
	out	0x20, al	; Write EOI to PIC (port 0x20)
	iret

keyboardISR:

	push ax
	push bx
	push cx
	push dx
	push si
	push di
	push bp
	push es
	push ds


	call YKEnterISR

	sti
	call mykeyboard
	cli
	
	mov	al, 0x20	; Load nonspecific EOI value (0x20) into register al
	out	0x20, al	; Write EOI to PIC (port 0x20)
	

	call YKExitISR

	pop ds
	pop es
	pop bp
	pop di
	pop si
	pop dx
	pop cx
	pop bx
	pop ax

	iret


; Generated by c86 (BYU-NASM) 5.1 (beta) from lab6inth.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
myreset:
	; >>>>> Line:	10
	; >>>>> { 
	jmp	L_lab6inth_1
L_lab6inth_2:
	; >>>>> Line:	11
	; >>>>> exit(0); 
	xor	al, al
	push	ax
	call	exit
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_lab6inth_1:
	push	bp
	mov	bp, sp
	jmp	L_lab6inth_2
	ALIGN	2
L_lab6inth_4:
	DW	0
L_lab6inth_5:
	DW	0
L_lab6inth_6:
	DB	"  TickISR: queue overflow! ",0xA,0
	ALIGN	2
myisr:
	; >>>>> Line:	15
	; >>>>> { 
	jmp	L_lab6inth_7
L_lab6inth_8:
	; >>>>> Line:	19
	; >>>>> MsgArray[next].tick = YKTickNum; 
	mov	ax, word [L_lab6inth_4]
	shl	ax, 1
	shl	ax, 1
	mov	si, ax
	add	si, MsgArray
	mov	ax, word [YKTickNum]
	mov	word [si], ax
	; >>>>> Line:	20
	; >>>>> data = (data + 89) % 100; 
	mov	ax, word [L_lab6inth_5]
	add	ax, 89
	cwd
	mov	cx, 100
	idiv	cx
	mov	ax, dx
	mov	word [L_lab6inth_5], ax
	; >>>>> Line:	21
	; >>>>> MsgArray[next].data = data; 
	mov	ax, word [L_lab6inth_4]
	shl	ax, 1
	shl	ax, 1
	add	ax, MsgArray
	mov	si, ax
	add	si, 2
	mov	ax, word [L_lab6inth_5]
	mov	word [si], ax
	; >>>>> Line:	22
	; >>>>> if (YKQPost(MsgQPtr, (void *) &(MsgArray[next])) == 0) 
	mov	ax, word [L_lab6inth_4]
	shl	ax, 1
	shl	ax, 1
	add	ax, MsgArray
	push	ax
	push	word [MsgQPtr]
	call	YKQPost
	add	sp, 4
	test	ax, ax
	jne	L_lab6inth_9
	; >>>>> Line:	23
	; >>>>> printString("  TickISR: queue overf 
	mov	ax, L_lab6inth_6
	push	ax
	call	printString
	add	sp, 2
	jmp	L_lab6inth_10
L_lab6inth_9:
	; >>>>> Line:	24
	; >>>>> else if (++next >= 20) 
	mov	ax, word [L_lab6inth_4]
	inc	ax
	mov	word [L_lab6inth_4], ax
	cmp	ax, 20
	jl	L_lab6inth_11
	; >>>>> Line:	25
	; >>>>> next = 0; 
	mov	word [L_lab6inth_4], 0
L_lab6inth_11:
L_lab6inth_10:
	mov	sp, bp
	pop	bp
	ret
L_lab6inth_7:
	push	bp
	mov	bp, sp
	jmp	L_lab6inth_8
	ALIGN	2
mykeyboard:
	; >>>>> Line:	29
	; >>>>> { 
	jmp	L_lab6inth_13
L_lab6inth_14:
	; >>>>> Line:	30
	; >>>>> GlobalFlag = 1; 
	mov	word [GlobalFlag], 1
	mov	sp, bp
	pop	bp
	ret
L_lab6inth_13:
	push	bp
	mov	bp, sp
	jmp	L_lab6inth_14
; Generated by c86 (BYU-NASM) 5.1 (beta) from myinth.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
; Generated by c86 (BYU-NASM) 5.1 (beta) from lab4_app.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
L_lab4_app_5:
	DB	"Max: ",0
L_lab4_app_4:
	DB	"Min: ",0
L_lab4_app_3:
	DB	0x9,0
L_lab4_app_2:
	DB	"Ticks: ",0
L_lab4_app_1:
	DB	"! Dropped msgs: tick ",0
	ALIGN	2
ATask:
	; >>>>> Line:	26
	; >>>>> { 
	jmp	L_lab4_app_6
L_lab4_app_7:
	; >>>>> Line:	30
	; >>>>> min = 100; 
	mov	word [bp-4], 100
	; >>>>> Line:	31
	; >>>>> max = 0; 
	mov	word [bp-6], 0
	; >>>>> Line:	32
	; >>>>> count = 0; 
	mov	word [bp-8], 0
	; >>>>> Line:	34
	; >>>>> while (1) 
	jmp	L_lab4_app_9
L_lab4_app_8:
	; >>>>> Line:	36
	; >>>>> tmp = (struct msg *) YKQPend(MsgQPtr); 
	push	word [MsgQPtr]
	call	YKQPend
	add	sp, 2
	mov	word [bp-2], ax
	; >>>>> Line:	39
	; >>>>> if (tmp->tick != count+1) 
	mov	ax, word [bp-8]
	inc	ax
	mov	si, word [bp-2]
	mov	dx, word [si]
	cmp	dx, ax
	je	L_lab4_app_11
	; >>>>> Line:	41
	; >>>>> print(" 
	mov	ax, 21
	push	ax
	mov	ax, L_lab4_app_1
	push	ax
	call	print
	add	sp, 4
	; >>>>> Line:	42
	; >>>>> if (tmp->tick - (count+1) > 1) { 
	mov	si, word [bp-2]
	mov	ax, word [si]
	sub	ax, word [bp-8]
	dec	ax
	cmp	ax, 1
	jle	L_lab4_app_12
	; >>>>> Line:	43
	; >>>>> printInt(count+1); 
	mov	ax, word [bp-8]
	inc	ax
	push	ax
	call	printInt
	add	sp, 2
	; >>>>> Line:	44
	; >>>>> printChar('-'); 
	mov	al, 45
	push	ax
	call	printChar
	add	sp, 2
	; >>>>> Line:	45
	; >>>>> printInt(tmp->tick-1); 
	mov	si, word [bp-2]
	mov	ax, word [si]
	dec	ax
	push	ax
	call	printInt
	add	sp, 2
	; >>>>> Line:	46
	; >>>>> printNewLine(); 
	call	printNewLine
	jmp	L_lab4_app_13
L_lab4_app_12:
	; >>>>> Line:	49
	; >>>>> printInt(tmp->tick-1); 
	mov	si, word [bp-2]
	mov	ax, word [si]
	dec	ax
	push	ax
	call	printInt
	add	sp, 2
	; >>>>> Line:	50
	; >>>>> printNewLine(); 
	call	printNewLine
L_lab4_app_13:
L_lab4_app_11:
	; >>>>> Line:	55
	; >>>>> count = tmp->tick; 
	mov	si, word [bp-2]
	mov	ax, word [si]
	mov	word [bp-8], ax
	; >>>>> Line:	58
	; >>>>> if (tmp->data < min) 
	mov	si, word [bp-2]
	add	si, 2
	mov	ax, word [bp-4]
	cmp	ax, word [si]
	jle	L_lab4_app_14
	; >>>>> Line:	59
	; >>>>> min = tmp->data; 
	mov	si, word [bp-2]
	add	si, 2
	mov	ax, word [si]
	mov	word [bp-4], ax
L_lab4_app_14:
	; >>>>> Line:	60
	; >>>>> if (tmp->data > max) 
	mov	si, word [bp-2]
	add	si, 2
	mov	ax, word [bp-6]
	cmp	ax, word [si]
	jge	L_lab4_app_15
	; >>>>> Line:	61
	; >>>>> max = tmp->data; 
	mov	si, word [bp-2]
	add	si, 2
	mov	ax, word [si]
	mov	word [bp-6], ax
L_lab4_app_15:
	; >>>>> Line:	64
	; >>>>> print(" 
	mov	ax, 7
	push	ax
	mov	ax, L_lab4_app_2
	push	ax
	call	print
	add	sp, 4
	; >>>>> Line:	65
	; >>>>> printInt(count); 
	push	word [bp-8]
	call	printInt
	add	sp, 2
	; >>>>> Line:	66
	; >>>>> print("\t", 1); 
	mov	ax, 1
	push	ax
	mov	ax, L_lab4_app_3
	push	ax
	call	print
	add	sp, 4
	; >>>>> Line:	67
	; >>>>> print("Min: ", 5); 
	mov	ax, 5
	push	ax
	mov	ax, L_lab4_app_4
	push	ax
	call	print
	add	sp, 4
	; >>>>> Line:	68
	; >>>>> printInt(min); 
	push	word [bp-4]
	call	printInt
	add	sp, 2
	; >>>>> Line:	69
	; >>>>> print("\t", 1); 
	mov	ax, 1
	push	ax
	mov	ax, L_lab4_app_3
	push	ax
	call	print
	add	sp, 4
	; >>>>> Line:	70
	; >>>>> print("Max: ", 5); 
	mov	ax, 5
	push	ax
	mov	ax, L_lab4_app_5
	push	ax
	call	print
	add	sp, 4
	; >>>>> Line:	71
	; >>>>> printInt(max); 
	push	word [bp-6]
	call	printInt
	add	sp, 2
	; >>>>> Line:	72
	; >>>>> printNewLine(); 
	call	printNewLine
L_lab4_app_9:
	jmp	L_lab4_app_8
L_lab4_app_10:
	mov	sp, bp
	pop	bp
	ret
L_lab4_app_6:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_lab4_app_7
	ALIGN	2
BTask:
	; >>>>> Line:	77
	; >>>>> { 
	jmp	L_lab4_app_17
L_lab4_app_18:
	; >>>>> Line:	81
	; >>>>> curval = 1001; 
	mov	word [bp-4], 1001
	; >>>>> Line:	82
	; >>>>> chcount = 0; 
	mov	word [bp-10], 0
	; >>>>> Line:	84
	; >>>>> while (1) 
	jmp	L_lab4_app_20
L_lab4_app_19:
	; >>>>> Line:	86
	; >>>>> YKDelayTask(2); 
	mov	ax, 2
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	88
	; >>>>> if (GlobalFlag == 1) 
	cmp	word [GlobalFlag], 1
	jne	L_lab4_app_22
	; >>>>> Line:	90
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	91
	; >>>>> busycount = YKTickNum; 
	mov	ax, word [YKTickNum]
	mov	word [bp-2], ax
	; >>>>> Line:	92
	; >>>>> } 
	call	YKExitMutex
	; >>>>> Line:	94
	; >>>>> while (1) 
	jmp	L_lab4_app_24
L_lab4_app_23:
	; >>>>> Line:	96
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	97
	; >>>>> tickNum = YKTickNum; 
	mov	ax, word [YKTickNum]
	mov	word [bp-12], ax
	; >>>>> Line:	98
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	99
	; >>>>> if(tickNum >= busycount + 5) break; 
	mov	ax, word [bp-2]
	add	ax, 5
	mov	dx, word [bp-12]
	cmp	dx, ax
	jb	L_lab4_app_26
	; >>>>> Line:	99
	; >>>>> if(tickNum >= busycount + 5) break; 
	jmp	L_lab4_app_25
L_lab4_app_26:
	; >>>>> Line:	101
	; >>>>> curval += 2; 
	add	word [bp-4], 2
	; >>>>> Line:	102
	; >>>>> flag = 0; 
	mov	word [bp-8], 0
	; >>>>> Line:	103
	; >>>>> for (j = 3; (j*j) < curval; j += 2) 
	mov	word [bp-6], 3
	jmp	L_lab4_app_28
L_lab4_app_27:
	; >>>>> Line:	105
	; >>>>> if (curval % j == 0) 
	mov	ax, word [bp-4]
	cwd
	idiv	word [bp-6]
	mov	ax, dx
	test	ax, ax
	jne	L_lab4_app_31
	; >>>>> Line:	107
	; >>>>> flag = 1; 
	mov	word [bp-8], 1
	; >>>>> Line:	108
	; >>>>> break; 
	jmp	L_lab4_app_29
L_lab4_app_31:
L_lab4_app_30:
	add	word [bp-6], 2
L_lab4_app_28:
	mov	ax, word [bp-6]
	imul	word [bp-6]
	mov	dx, word [bp-4]
	cmp	dx, ax
	jg	L_lab4_app_27
L_lab4_app_29:
	; >>>>> Line:	111
	; >>>>> if (!fl 
	mov	ax, word [bp-8]
	test	ax, ax
	jne	L_lab4_app_32
	; >>>>> Line:	113
	; >>>>> printChar('.'); 
	mov	al, 46
	push	ax
	call	printChar
	add	sp, 2
	; >>>>> Line:	114
	; >>>>> if (++chcount > 75) 
	mov	ax, word [bp-10]
	inc	ax
	mov	word [bp-10], ax
	cmp	ax, 75
	jle	L_lab4_app_33
	; >>>>> Line:	116
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	117
	; >>>>> chcount = 0; 
	mov	word [bp-10], 0
L_lab4_app_33:
L_lab4_app_32:
L_lab4_app_24:
	jmp	L_lab4_app_23
L_lab4_app_25:
	; >>>>> Line:	121
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	122
	; >>>>> chcount = 0; 
	mov	word [bp-10], 0
	; >>>>> Line:	123
	; >>>>> GlobalFlag = 0; 
	mov	word [GlobalFlag], 0
L_lab4_app_22:
L_lab4_app_20:
	jmp	L_lab4_app_19
L_lab4_app_21:
	mov	sp, bp
	pop	bp
	ret
L_lab4_app_17:
	push	bp
	mov	bp, sp
	sub	sp, 12
	jmp	L_lab4_app_18
L_lab4_app_39:
	DB	"% >>>>>",0xD,0xA,0
L_lab4_app_38:
	DB	", CPU usage: ",0
L_lab4_app_37:
	DB	"<<<<< Context switches: ",0
L_lab4_app_36:
	DB	"Determining CPU capacity",0xD,0xA,0
L_lab4_app_35:
	DB	"Welcome to the YAK kernel",0xD,0xA,0
	ALIGN	2
STask:
	; >>>>> Line:	129
	; >>>>> { 
	jmp	L_lab4_app_40
L_lab4_app_41:
	; >>>>> Line:	133
	; >>>>> YKDelayTask(1); 
	mov	ax, 1
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	134
	; >>>>> printString("Welcome to the YAK kernel\r\n"); 
	mov	ax, L_lab4_app_35
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	135
	; >>>>> printString( 
	mov	ax, L_lab4_app_36
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	136
	; >>>>> YKDelayTask(1); 
	mov	ax, 1
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	137
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	138
	; >>>>> YKDelayTask(5); 
	mov	ax, 5
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	139
	; >>>>> max = YKIdleCount / 25; 
	mov	ax, word [YKIdleCount]
	xor	dx, dx
	mov	cx, 25
	div	cx
	mov	word [bp-2], ax
	; >>>>> Line:	140
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	142
	; >>>>> YKNewTask(BTask, (void *) &BTaskStk[512], 10); 
	mov	ax, 10
	push	ax
	mov	ax, (BTaskStk+1024)
	push	ax
	mov	ax, BTask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	143
	; >>>>> YKNewTask(ATask, (void *) &ATaskStk[512], 20); 
	mov	ax, 20
	push	ax
	mov	ax, (ATaskStk+1024)
	push	ax
	mov	ax, ATask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	145
	; >>>>> while (1) 
	jmp	L_lab4_app_43
L_lab4_app_42:
	; >>>>> Line:	147
	; >>>>> YKDelayTask(20); 
	mov	ax, 20
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	149
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	150
	; >>>>> switchCount = YKCtxSwCount; 
	mov	ax, word [YKCtxSwCount]
	mov	word [bp-4], ax
	; >>>>> Line:	151
	; >>>>> idleCount = YKIdleCount; 
	mov	ax, word [YKIdleCount]
	mov	word [bp-6], ax
	; >>>>> Line:	152
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	154
	; >>>>> printString("<<<<< Context switches: "); 
	mov	ax, L_lab4_app_37
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	155
	; >>>>> printInt((int)switchCount); 
	push	word [bp-4]
	call	printInt
	add	sp, 2
	; >>>>> Line:	156
	; >>>>> printStri 
	mov	ax, L_lab4_app_38
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	157
	; >>>>> tmp = (int) (idleCount/max); 
	mov	ax, word [bp-6]
	xor	dx, dx
	div	word [bp-2]
	mov	word [bp-8], ax
	; >>>>> Line:	158
	; >>>>> printInt(100-tmp); 
	mov	ax, 100
	sub	ax, word [bp-8]
	push	ax
	call	printInt
	add	sp, 2
	; >>>>> Line:	159
	; >>>>> printString("% >>>>>\r\n"); 
	mov	ax, L_lab4_app_39
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	161
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	162
	; >>>>> YKCtxSwCount = 0; 
	mov	word [YKCtxSwCount], 0
	; >>>>> Line:	163
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	164
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_lab4_app_43:
	jmp	L_lab4_app_42
L_lab4_app_44:
	mov	sp, bp
	pop	bp
	ret
L_lab4_app_40:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_lab4_app_41
	ALIGN	2
main:
	; >>>>> Line:	169
	; >>>>> { 
	jmp	L_lab4_app_46
L_lab4_app_47:
	; >>>>> Line:	170
	; >>>>> YKInitialize(); 
	call	YKInitialize
	; >>>>> Line:	173
	; >>>>> GlobalFlag = 0; 
	mov	word [GlobalFlag], 0
	; >>>>> Line:	174
	; >>>>> MsgQPtr = YKQCreate(MsgQ, 10); 
	mov	ax, 10
	push	ax
	mov	ax, MsgQ
	push	ax
	call	YKQCreate
	add	sp, 4
	mov	word [MsgQPtr], ax
	; >>>>> Line:	175
	; >>>>> YKNewTask(STask, (void *) &STaskStk[512], 30); 
	mov	ax, 30
	push	ax
	mov	ax, (STaskStk+1024)
	push	ax
	mov	ax, STask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	177
	; >>>>> YKRun(); 
	call	YKRun
	mov	sp, bp
	pop	bp
	ret
L_lab4_app_46:
	push	bp
	mov	bp, sp
	jmp	L_lab4_app_47
	ALIGN	2
MsgArray:
	TIMES	80 db 0
ATaskStk:
	TIMES	1024 db 0
BTaskStk:
	TIMES	1024 db 0
STaskStk:
	TIMES	1024 db 0
GlobalFlag:
	TIMES	2 db 0
MsgQ:
	TIMES	20 db 0
MsgQPtr:
	TIMES	2 db 0
; Generated by c86 (BYU-NASM) 5.1 (beta) from yak.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
YKIdleCount:
	DW	0
YKSEMNextFree:
	DW	0
isRunning:
	DW	0
ISRDepth:
	DW	0
YKTickNum:
	DW	1
deltaDelay:
	DW	0
readyListHead:
	DW	0
pendingListHead:
	DW	0
delayListHead:
	DW	0
queuePendingListHead:
	DW	0
L_yak_4:
	DB	0xD,0xA,0
L_yak_3:
	DB	", ",0
L_yak_2:
	DB	" and count=",0
L_yak_1:
	DB	"id=",0
	ALIGN	2
printDelayCounts:
	; >>>>> Line:	32
	; >>>>> static void printDelayCounts(){ 
	jmp	L_yak_5
L_yak_6:
	; >>>>> Line:	34
	; >>>>> while(1){ 
	mov	ax, word [delayListHead]
	mov	word [bp-2], ax
	; >>>>> Line:	34
	; >>>>> while(1){ 
	jmp	L_yak_8
L_yak_7:
	; >>>>> Line:	35
	; >>>>> if(itr == ((void *) 0)){ 
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yak_10
	; >>>>> Line:	36
	; >>>>> break; 
	jmp	L_yak_9
L_yak_10:
	; >>>>> Line:	39
	; >>>>> printString("id="); 
	mov	ax, L_yak_1
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	40
	; >>>>> printInt(itr->id); 
	mov	si, word [bp-2]
	add	si, 28
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	41
	; >>>>> printString(" and count=") ; 
	mov	ax, L_yak_2
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	42
	; >>>>> printInt(itr->delayCount); 
	mov	si, word [bp-2]
	add	si, 30
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	44
	; >>>>> printString(", ") ; 
	mov	ax, L_yak_3
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	45
	; >>>>> itr = itr->nextTCB; 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yak_8:
	jmp	L_yak_7
L_yak_9:
	; >>>>> Line:	47
	; >>>>> printString("\r\n") ; 
	mov	ax, L_yak_4
	push	ax
	call	printString
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_yak_5:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yak_6
L_yak_15:
	DB	" pri: ",0
L_yak_14:
	DB	" dc: ",0
L_yak_13:
	DB	" ip: ",0
L_yak_12:
	DB	"id: ",0
	ALIGN	2
printReadyList:
	; >>>>> Line:	53
	; >>>>> g("\r\n"); 
	jmp	L_yak_16
L_yak_17:
	; >>>>> Line:	55
	; >>>>> while(1){ 
	mov	ax, word [readyListHead]
	mov	word [bp-2], ax
	; >>>>> Line:	55
	; >>>>> while(1){ 
	jmp	L_yak_19
L_yak_18:
	; >>>>> Line:	56
	; >>>>> if(itr == ((void *) 0)){ 
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yak_21
	; >>>>> Line:	57
	; >>>>> break; 
	jmp	L_yak_20
L_yak_21:
	; >>>>> Line:	60
	; >>>>> printString("id: "); 
	mov	ax, L_yak_12
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	61
	; >>>>> printInt(itr->id); 
	mov	si, word [bp-2]
	add	si, 28
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	62
	; >>>>> printString(" ip: ") ; 
	mov	ax, L_yak_13
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	63
	; >>>>> printInt(itr->ip); 
	mov	si, word [bp-2]
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	64
	; >>>>> printString(" dc: ") ; 
	mov	ax, L_yak_14
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	65
	; >>>>> printInt(itr->delayCount); 
	mov	si, word [bp-2]
	add	si, 30
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	66
	; >>>>> printString(" pri: ") ; 
	mov	ax, L_yak_15
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	67
	; >>>>> printInt(itr->taskPriority); 
	mov	si, word [bp-2]
	add	si, 24
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	68
	; >>>>> printString(", ") ; 
	mov	ax, L_yak_3
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	69
	; >>>>> itr = itr->nextTCB; 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yak_19:
	jmp	L_yak_18
L_yak_20:
	; >>>>> Line:	71
	; >>>>> printString("\r\n") ; 
	mov	ax, L_yak_4
	push	ax
	call	printString
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_yak_16:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yak_17
L_yak_23:
	DB	"First dispatch to task ",0
	ALIGN	2
firstDispatch:
	; >>>>> Line:	77
	; >>>>> static void firstDispatch(int calledFromISR){ 
	jmp	L_yak_24
L_yak_25:
	; >>>>> Line:	78
	; >>>>> printString("First dispatch to task "); 
	mov	ax, L_yak_23
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	79
	; >>>>> printInt(readyListHead->id); 
	mov	si, word [readyListHead]
	add	si, 28
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	80
	; >>>>> printString("\r\n"); 
	mov	ax, L_yak_4
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	81
	; >>>>> YKCtxSwCount++; 
	inc	word [YKCtxSwCount]
	; >>>>> Line:	82
	; >>>>> nextTCB = readyListHead; 
	mov	ax, word [readyListHead]
	mov	word [nextTCB], ax
	; >>>>> Line:	83
	; >>>>> runningTCB = readyListHead; 
	mov	ax, word [readyListHead]
	mov	word [runningTCB], ax
	; >>>>> Line:	84
	; >>>>> dispatchHelperFirst(); 
	call	dispatchHelperFirst
	; >>>>> Line:	85
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yak_26:
	; >>>>> Line:	86
	; >>>>> return; 
	mov	sp, bp
	pop	bp
	ret
L_yak_24:
	push	bp
	mov	bp, sp
	jmp	L_yak_25
	ALIGN	2
YKInitialize:
	; >>>>> Line:	90
	; >>>>> void YKInitialize(){ 
	jmp	L_yak_28
L_yak_29:
	; >>>>> Line:	92
	; >>>>> YKEnterMutex(); 
	mov	word [bp-2], 0
	; >>>>> Line:	92
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	93
	; >>>>> for(i= 0; i < 15 ; i++){ 
	mov	word [bp-2], 0
	jmp	L_yak_31
L_yak_30:
	; >>>>> Line:	94
	; >>>>> TCBArray[i].inUse = 0; 
	mov	ax, word [bp-2]
	mov	cx, 40
	imul	cx
	add	ax, TCBArray
	mov	si, ax
	add	si, 36
	mov	word [si], 0
	; >>>>> Line:	95
	; >>>>> TCBArray[i].id = i; 
	mov	ax, word [bp-2]
	mov	cx, 40
	imul	cx
	add	ax, TCBArray
	mov	si, ax
	add	si, 28
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yak_33:
	inc	word [bp-2]
L_yak_31:
	cmp	word [bp-2], 15
	jl	L_yak_30
L_yak_32:
	; >>>>> Line:	97
	; >>>>> for(i = 0; i < 15; i++){ 
	mov	word [bp-2], 0
	jmp	L_yak_35
L_yak_34:
	; >>>>> Line:	98
	; >>>>> YKQArray[i].inUse = 0; 
	mov	ax, word [bp-2]
	mov	cx, 4
	shl	ax, cl
	add	ax, YKQArray
	mov	si, ax
	add	si, 4
	mov	word [si], 0
	; >>>>> Line:	99
	; >>>>> YKQArray[i].id = i; 
	mov	ax, word [bp-2]
	mov	cx, 4
	shl	ax, cl
	add	ax, YKQArray
	mov	si, ax
	add	si, 6
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	100
	; >>>>> YKQArray[i].start = ((void *) 0); 
	mov	ax, word [bp-2]
	mov	cx, 4
	shl	ax, cl
	mov	si, ax
	add	si, YKQArray
	mov	word [si], 0
	; >>>>> Line:	101
	; >>>>> YKQArray[i].semaphore = YKSemCreate(0); 
	xor	ax, ax
	push	ax
	call	YKSemCreate
	add	sp, 2
	mov	dx, word [bp-2]
	mov	cx, 4
	shl	dx, cl
	add	dx, YKQArray
	mov	si, dx
	add	si, 8
	mov	word [si], ax
	; >>>>> Line:	102
	; >>>>> YKQArray[i].front = 0; 
	mov	ax, word [bp-2]
	mov	cx, 4
	shl	ax, cl
	add	ax, YKQArray
	mov	si, ax
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	103
	; >>>>> YKQArray[i].rear = 0; 
	mov	ax, word [bp-2]
	mov	cx, 4
	shl	ax, cl
	add	ax, YKQArray
	mov	si, ax
	add	si, 12
	mov	word [si], 0
	; >>>>> Line:	104
	; >>>>> YKQArray[i].numberPendingOn = 0; 
	mov	ax, word [bp-2]
	mov	cx, 4
	shl	ax, cl
	add	ax, YKQArray
	mov	si, ax
	add	si, 14
	mov	word [si], 0
L_yak_37:
	inc	word [bp-2]
L_yak_35:
	cmp	word [bp-2], 15
	jl	L_yak_34
L_yak_36:
	; >>>>> Line:	106
	; >>>>> YKNewTask(YKIdleTask, 
	mov	ax, 100
	push	ax
	mov	ax, (IdleStk+4096)
	push	ax
	mov	ax, YKIdleTask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	107
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_yak_28:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yak_29
	ALIGN	2
YKNewTask:
	; >>>>> Line:	110
	; >>>>> void YKNewTask(void(*task)(void), void * taskStack, unsigned char priority){ 
	jmp	L_yak_39
L_yak_40:
	; >>>>> Line:	117
	; >>>>> YKEnterMutex(); 
	mov	word [bp-2], 0
	mov	ax, word [readyListHead]
	mov	word [bp-4], ax
	; >>>>> Line:	117
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	118
	; >>>>> for(i = 0; i < 15; i++){ 
	mov	word [bp-2], 0
	jmp	L_yak_42
L_yak_41:
	; >>>>> Line:	119
	; >>>>> if(!TCBArray[i].inUse){ 
	mov	ax, word [bp-2]
	mov	cx, 40
	imul	cx
	add	ax, TCBArray
	mov	si, ax
	add	si, 36
	mov	ax, word [si]
	test	ax, ax
	jne	L_yak_45
	; >>>>> Line:	120
	; >>>>> break; 
	jmp	L_yak_43
L_yak_45:
L_yak_44:
	inc	word [bp-2]
L_yak_42:
	cmp	word [bp-2], 15
	jl	L_yak_41
L_yak_43:
	; >>>>> Line:	129
	; >>>>> TCBArray[i].taskPriority = priority; 
	mov	al, byte [bp+8]
	xor	ah, ah
	push	ax
	mov	ax, word [bp-2]
	mov	cx, 40
	imul	cx
	mov	dx, ax
	add	dx, TCBArray
	mov	si, dx
	add	si, 24
	pop	ax
	mov	word [si], ax
	; >>>>> Line:	130
	; >>>>> TCBArray[i].taskStack = taskStack; 
	mov	ax, word [bp-2]
	mov	cx, 40
	imul	cx
	add	ax, TCBArray
	mov	si, ax
	add	si, 22
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	131
	; >>>>> TCBArray[i].ip = (unsigned int)task; 
	mov	ax, word [bp-2]
	mov	cx, 40
	imul	cx
	mov	si, ax
	add	si, TCBArray
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	132
	; >>>>> TCBArray[i].taskState = running; 
	mov	ax, word [bp-2]
	mov	cx, 40
	imul	cx
	add	ax, TCBArray
	mov	si, ax
	add	si, 26
	mov	word [si], 0
	; >>>>> Line:	133
	; >>>>> TCBArray[i].delayCount = 0; 
	mov	ax, word [bp-2]
	mov	cx, 40
	imul	cx
	add	ax, TCBArray
	mov	si, ax
	add	si, 30
	mov	word [si], 0
	; >>>>> Line:	134
	; >>>>> TCBArray[i].inUse = 1; 
	mov	ax, word [bp-2]
	mov	cx, 40
	imul	cx
	add	ax, TCBArray
	mov	si, ax
	add	si, 36
	mov	word [si], 1
	; >>>>> Line:	135
	; >>>>> TCBArray[i].sp = (unsigned)(taskStack) 
	mov	ax, word [bp-2]
	mov	cx, 40
	imul	cx
	add	ax, TCBArray
	mov	si, ax
	add	si, 2
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	136
	; >>>>> TCBArray[i].bp = (unsigned)(taskStack); 
	mov	ax, word [bp-2]
	mov	cx, 40
	imul	cx
	add	ax, TCBArray
	mov	si, ax
	add	si, 4
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	138
	; >>>>> temp = runningTCB; 
	mov	ax, word [runningTCB]
	mov	word [bp-6], ax
	; >>>>> Line:	139
	; >>>>> runningTCB = &(TCBArray[i]); 
	mov	ax, word [bp-2]
	mov	cx, 40
	imul	cx
	add	ax, TCBArray
	mov	word [runningTCB], ax
	; >>>>> Line:	140
	; >>>>> initializeStack(); 
	call	initializeStack
	; >>>>> Line:	141
	; >>>>> runningTCB = temp; 
	mov	ax, word [bp-6]
	mov	word [runningTCB], ax
	; >>>>> Line:	144
	; >>>>> if(readyListHead == ((void *) 0)){ 
	mov	ax, word [readyListHead]
	test	ax, ax
	jne	L_yak_46
	; >>>>> Line:	145
	; >>>>> readyListHead = &TCBArray[i]; 
	mov	ax, word [bp-2]
	mov	cx, 40
	imul	cx
	add	ax, TCBArray
	mov	word [readyListHead], ax
	; >>>>> Line:	146
	; >>>>> readyListHead->prevTCB = ((void *) 0); 
	mov	si, word [readyListHead]
	add	si, 34
	mov	word [si], 0
	; >>>>> Line:	147
	; >>>>> readyListHead->nextTCB = ((void *) 0); 
	mov	si, word [readyListHead]
	add	si, 32
	mov	word [si], 0
	; >>>>> Line:	148
	; >>>>> if(isRunning){ 
	mov	ax, word [isRunning]
	test	ax, ax
	je	L_yak_47
	; >>>>> Line:	149
	; >>>>> YKScheduler(0); 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
L_yak_47:
	; >>>>> Line:	152
	; >>>>> return; 
	jmp	L_yak_48
L_yak_46:
	; >>>>> Line:	155
	; >>>>> while(1){ 
	jmp	L_yak_50
L_yak_49:
	; >>>>> Line:	156
	; >>>>> if(itr->taskPriority >= TCBArray[i].taskPriority){ 
	mov	ax, word [bp-2]
	mov	cx, 40
	imul	cx
	add	ax, TCBArray
	mov	si, ax
	add	si, 24
	mov	di, word [bp-4]
	add	di, 24
	mov	ax, word [di]
	cmp	ax, word [si]
	jb	L_yak_52
	; >>>>> Line:	157
	; >>>>> if(itr == readyListHead){ 
	mov	ax, word [readyListHead]
	cmp	ax, word [bp-4]
	jne	L_yak_53
	; >>>>> Line:	159
	; >>>>> itr->prevTCB = &TCBArray[i]; 
	mov	ax, word [bp-2]
	mov	cx, 40
	imul	cx
	add	ax, TCBArray
	mov	si, word [bp-4]
	add	si, 34
	mov	word [si], ax
	; >>>>> Line:	160
	; >>>>> TCBArray[i].nextTCB = itr; 
	mov	ax, word [bp-2]
	mov	cx, 40
	imul	cx
	add	ax, TCBArray
	mov	si, ax
	add	si, 32
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	161
	; >>>>> TCBArray[i].prevTCB = ((void *) 0); 
	mov	ax, word [bp-2]
	mov	cx, 40
	imul	cx
	add	ax, TCBArray
	mov	si, ax
	add	si, 34
	mov	word [si], 0
	; >>>>> Line:	162
	; >>>>> readyListHead = &TCBArray[i]; 
	mov	ax, word [bp-2]
	mov	cx, 40
	imul	cx
	add	ax, TCBArray
	mov	word [readyListHead], ax
	; >>>>> Line:	163
	; >>>>> break; 
	jmp	L_yak_51
	jmp	L_yak_54
L_yak_53:
	; >>>>> Line:	166
	; >>>>> temp = itr->prevTCB; 
	mov	si, word [bp-4]
	add	si, 34
	mov	ax, word [si]
	mov	word [bp-6], ax
	; >>>>> Line:	167
	; >>>>> itr->prevTCB = &TCBArray[i]; 
	mov	ax, word [bp-2]
	mov	cx, 40
	imul	cx
	add	ax, TCBArray
	mov	si, word [bp-4]
	add	si, 34
	mov	word [si], ax
	; >>>>> Line:	168
	; >>>>> TCBArray[i].nextTCB = itr; 
	mov	ax, word [bp-2]
	mov	cx, 40
	imul	cx
	add	ax, TCBArray
	mov	si, ax
	add	si, 32
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	169
	; >>>>> TCBArray[i].prevTCB = temp; 
	mov	ax, word [bp-2]
	mov	cx, 40
	imul	cx
	add	ax, TCBArray
	mov	si, ax
	add	si, 34
	mov	ax, word [bp-6]
	mov	word [si], ax
	; >>>>> Line:	170
	; >>>>> temp->nextTCB = &TCBArray[i]; 
	mov	ax, word [bp-2]
	mov	cx, 40
	imul	cx
	add	ax, TCBArray
	mov	si, word [bp-6]
	add	si, 32
	mov	word [si], ax
	; >>>>> Line:	171
	; >>>>> break; 
	jmp	L_yak_51
L_yak_54:
L_yak_52:
	; >>>>> Line:	175
	; >>>>> if(itr->nextTCB == ((void *) 0)){ 
	mov	si, word [bp-4]
	add	si, 32
	mov	ax, word [si]
	test	ax, ax
	jne	L_yak_55
	; >>>>> Line:	176
	; >>>>> itr->nextTCB = &TCBArray[i]; 
	mov	ax, word [bp-2]
	mov	cx, 40
	imul	cx
	add	ax, TCBArray
	mov	si, word [bp-4]
	add	si, 32
	mov	word [si], ax
	; >>>>> Line:	177
	; >>>>> TCBArray[i].prevTCB = itr; 
	mov	ax, word [bp-2]
	mov	cx, 40
	imul	cx
	add	ax, TCBArray
	mov	si, ax
	add	si, 34
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	178
	; >>>>> TCBArray[i].nextTCB = ((void *) 0); 
	mov	ax, word [bp-2]
	mov	cx, 40
	imul	cx
	add	ax, TCBArray
	mov	si, ax
	add	si, 32
	mov	word [si], 0
	; >>>>> Line:	179
	; >>>>> break; 
	jmp	L_yak_51
L_yak_55:
	; >>>>> Line:	182
	; >>>>> itr = itr->nextTCB; 
	mov	si, word [bp-4]
	add	si, 32
	mov	ax, word [si]
	mov	word [bp-4], ax
L_yak_50:
	jmp	L_yak_49
L_yak_51:
	; >>>>> Line:	184
	; >>>>> if(isRunning){ 
	mov	ax, word [isRunning]
	test	ax, ax
	je	L_yak_56
	; >>>>> Line:	185
	; >>>>> YKScheduler(0); 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
L_yak_56:
	; >>>>> Line:	187
	; >>>>> if(isRunning){ 
	mov	ax, word [isRunning]
	test	ax, ax
	je	L_yak_57
	; >>>>> Line:	188
	; >>>>> "yakc.c" 
	call	YKExitMutex
L_yak_57:
L_yak_48:
	mov	sp, bp
	pop	bp
	ret
L_yak_39:
	push	bp
	mov	bp, sp
	sub	sp, 6
	jmp	L_yak_40
	ALIGN	2
YKRun:
	; >>>>> Line:	192
	; >>>>> void YKRun(){ 
	jmp	L_yak_59
L_yak_60:
	; >>>>> Line:	193
	; >>>>> isRunning = 1; 
	mov	word [isRunning], 1
	; >>>>> Line:	194
	; >>>>> firstDispatch(0); 
	xor	ax, ax
	push	ax
	call	firstDispatch
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_yak_59:
	push	bp
	mov	bp, sp
	jmp	L_yak_60
	ALIGN	2
YKIdleTask:
	; >>>>> Line:	198
	; >>>>> void YKIdleTask(){ 
	jmp	L_yak_62
L_yak_63:
	; >>>>> Line:	199
	; >>>>> while(1){ 
	jmp	L_yak_65
L_yak_64:
	; >>>>> Line:	201
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	202
	; >>>>> YKIdleCount++; 
	inc	word [YKIdleCount]
	; >>>>> Line:	203
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yak_65:
	jmp	L_yak_64
L_yak_66:
	mov	sp, bp
	pop	bp
	ret
L_yak_62:
	push	bp
	mov	bp, sp
	jmp	L_yak_63
	ALIGN	2
YKScheduler:
	; >>>>> Line:	209
	; >>>>> void YKScheduler(int calledFromISR){ 
	jmp	L_yak_68
L_yak_69:
	; >>>>> Line:	210
	; >>>>> nextTCB = readyListHead; 
	mov	ax, word [readyListHead]
	mov	word [nextTCB], ax
	; >>>>> Line:	224
	; >>>>> if(nextTCB == runningTCB){ 
	mov	ax, word [runningTCB]
	cmp	ax, word [nextTCB]
	jne	L_yak_70
	; >>>>> Line:	225
	; >>>>> if(!calledFromISR){ 
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_yak_71
	; >>>>> Line:	226
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yak_71:
	; >>>>> Line:	228
	; >>>>> return; 
	jmp	L_yak_72
L_yak_70:
	; >>>>> Line:	230
	; >>>>> YKCtxSwCount++; 
	inc	word [YKCtxSwCount]
	; >>>>> Line:	231
	; >>>>> dispatcher(); 
	call	dispatcher
	; >>>>> Line:	239
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yak_72:
	; >>>>> Line:	240
	; >>>>> return; 
	mov	sp, bp
	pop	bp
	ret
L_yak_68:
	push	bp
	mov	bp, sp
	jmp	L_yak_69
	ALIGN	2
YKDelayTask:
	; >>>>> Line:	244
	; >>>>> void YKDelayTask(unsigned count){ 
	jmp	L_yak_74
L_yak_75:
	; >>>>> Line:	247
	; >>>>> if(count == 0){ 
	mov	ax, word [delayListHead]
	mov	word [bp-2], ax
	; >>>>> Line:	247
	; >>>>> if(count == 0){ 
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_yak_76
	; >>>>> Line:	248
	; >>>>> return; 
	jmp	L_yak_77
L_yak_76:
	; >>>>> Line:	260
	; >>>>> TC 
	call	YKEnterMutex
	; >>>>> Line:	261
	; >>>>> runningTCB->delayCount = count; 
	mov	si, word [runningTCB]
	add	si, 30
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	267
	; >>>>> if(runningTCB == readyListHead){ 
	mov	ax, word [readyListHead]
	cmp	ax, word [runningTCB]
	jne	L_yak_78
	; >>>>> Line:	268
	; >>>>> readyListHead = runningTCB->nextTCB; 
	mov	si, word [runningTCB]
	add	si, 32
	mov	ax, word [si]
	mov	word [readyListHead], ax
	; >>>>> Line:	269
	; >>>>> readyListHead->prevTCB = ((void *) 0); 
	mov	si, word [readyListHead]
	add	si, 34
	mov	word [si], 0
	jmp	L_yak_79
L_yak_78:
	; >>>>> Line:	270
	; >>>>> }else if(runningTCB->nextTCB == ((void *) 0)){ 
	mov	si, word [runningTCB]
	add	si, 32
	mov	ax, word [si]
	test	ax, ax
	jne	L_yak_80
	; >>>>> Line:	271
	; >>>>> runningTCB->prevTCB->nextTCB = ((void *) 0); 
	mov	si, word [runningTCB]
	add	si, 34
	mov	si, word [si]
	add	si, 32
	mov	word [si], 0
	jmp	L_yak_81
L_yak_80:
	; >>>>> Line:	273
	; >>>>> runningTCB->prevTCB->nextTCB = runningTCB->nextTCB; 
	mov	si, word [runningTCB]
	add	si, 32
	mov	di, word [runningTCB]
	add	di, 34
	mov	di, word [di]
	add	di, 32
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	274
	; >>>>> runningTCB->nextTCB->prevTCB = runningTCB->prevTCB; 
	mov	si, word [runningTCB]
	add	si, 34
	mov	di, word [runningTCB]
	add	di, 32
	mov	di, word [di]
	add	di, 34
	mov	ax, word [si]
	mov	word [di], ax
L_yak_81:
L_yak_79:
	; >>>>> Line:	280
	; >>>>> if(delayListHead == ((void *) 0)){ 
	mov	ax, word [delayListHead]
	test	ax, ax
	jne	L_yak_82
	; >>>>> Line:	281
	; >>>>> delayListHead = runningTCB; 
	mov	ax, word [runningTCB]
	mov	word [delayListHead], ax
	; >>>>> Line:	282
	; >>>>> delayListHead->prevTCB = ((void *) 0); 
	mov	si, word [delayListHead]
	add	si, 34
	mov	word [si], 0
	; >>>>> Line:	283
	; >>>>> delayListHead->nextTC 
	mov	si, word [delayListHead]
	add	si, 32
	mov	word [si], 0
	; >>>>> Line:	284
	; >>>>> YKScheduler(0); 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
	; >>>>> Line:	285
	; >>>>> return; 
	jmp	L_yak_77
L_yak_82:
	; >>>>> Line:	289
	; >>>>> while(1){ 
	jmp	L_yak_84
L_yak_83:
	; >>>>> Line:	290
	; >>>>> if(itr == ((void *) 0)){ 
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yak_86
	; >>>>> Line:	291
	; >>>>> deltaDelay = 0; 
	mov	word [deltaDelay], 0
	; >>>>> Line:	292
	; >>>>> break; 
	jmp	L_yak_85
L_yak_86:
	; >>>>> Line:	294
	; >>>>> if(itr == delayListHead){ 
	mov	ax, word [delayListHead]
	cmp	ax, word [bp-2]
	jne	L_yak_87
	; >>>>> Line:	295
	; >>>>> itr = itr->nextTCB; 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	296
	; >>>>> continue; 
	jmp	L_yak_84
L_yak_87:
	; >>>>> Line:	298
	; >>>>> itr->delayCount -= deltaDelay; 
	mov	si, word [bp-2]
	add	si, 30
	mov	ax, word [deltaDelay]
	sub	word [si], ax
	; >>>>> Line:	299
	; >>>>> itr = itr->nextTCB; 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yak_84:
	jmp	L_yak_83
L_yak_85:
	; >>>>> Line:	303
	; >>>>> itr = delayListHead; 
	mov	ax, word [delayListHead]
	mov	word [bp-2], ax
	; >>>>> Line:	304
	; >>>>> while(1){ 
	jmp	L_yak_89
L_yak_88:
	; >>>>> Line:	305
	; >>>>> if(itr->delayCount >= runningTCB->delayCount){ 
	mov	si, word [bp-2]
	add	si, 30
	mov	di, word [runningTCB]
	add	di, 30
	mov	ax, word [di]
	cmp	ax, word [si]
	ja	L_yak_91
	; >>>>> Line:	307
	; >>>>> if(itr == delayListHead){ 
	mov	ax, word [delayListHead]
	cmp	ax, word [bp-2]
	jne	L_yak_92
	; >>>>> Line:	308
	; >>>>> itr->prevTCB = runningTCB; 
	mov	si, word [bp-2]
	add	si, 34
	mov	ax, word [runningTCB]
	mov	word [si], ax
	; >>>>> Line:	309
	; >>>>> runningTCB->nextTCB = itr; 
	mov	si, word [runningTCB]
	add	si, 32
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	310
	; >>>>> runningTCB->prevTCB = ((void *) 0); 
	mov	si, word [runningTCB]
	add	si, 34
	mov	word [si], 0
	; >>>>> Line:	311
	; >>>>> delayListHead = runningTCB; 
	mov	ax, word [runningTCB]
	mov	word [delayListHead], ax
	; >>>>> Line:	312
	; >>>>> break; 
	jmp	L_yak_90
	jmp	L_yak_93
L_yak_92:
	; >>>>> Line:	315
	; >>>>> temp = itr->prevTCB; 
	mov	si, word [bp-2]
	add	si, 34
	mov	ax, word [si]
	mov	word [bp-4], ax
	; >>>>> Line:	316
	; >>>>> itr->prevTCB = runningTCB; 
	mov	si, word [bp-2]
	add	si, 34
	mov	ax, word [runningTCB]
	mov	word [si], ax
	; >>>>> Line:	317
	; >>>>> runningTCB->nextTCB = itr; 
	mov	si, word [runningTCB]
	add	si, 32
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	318
	; >>>>> runningTCB->prevTCB = temp; 
	mov	si, word [runningTCB]
	add	si, 34
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	319
	; >>>>> temp->nextTCB = runningTCB; 
	mov	si, word [bp-4]
	add	si, 32
	mov	ax, word [runningTCB]
	mov	word [si], ax
	; >>>>> Line:	320
	; >>>>> break; 
	jmp	L_yak_90
L_yak_93:
L_yak_91:
	; >>>>> Line:	324
	; >>>>> if(itr->nextTCB == ((void *) 0)){ 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	test	ax, ax
	jne	L_yak_94
	; >>>>> Line:	325
	; >>>>> itr->nextTCB = runningTCB; 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [runningTCB]
	mov	word [si], ax
	; >>>>> Line:	326
	; >>>>> runningTCB->prevTCB = itr; 
	mov	si, word [runningTCB]
	add	si, 34
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	327
	; >>>>> runningTCB->nextTCB = ((void *) 0); 
	mov	si, word [runningTCB]
	add	si, 32
	mov	word [si], 0
	; >>>>> Line:	328
	; >>>>> break; 
	jmp	L_yak_90
L_yak_94:
	; >>>>> Line:	331
	; >>>>> itr = itr->nextTCB; 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yak_89:
	jmp	L_yak_88
L_yak_90:
	; >>>>> Line:	333
	; >>>>> YKScheduler(0); 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
L_yak_77:
	mov	sp, bp
	pop	bp
	ret
L_yak_74:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yak_75
	ALIGN	2
YKEnterISR:
	; >>>>> Line:	336
	; >>>>> void YKEnterISR(){ 
	jmp	L_yak_96
L_yak_97:
	; >>>>> Line:	337
	; >>>>> ISRDepth++; 
	inc	word [ISRDepth]
	mov	sp, bp
	pop	bp
	ret
L_yak_96:
	push	bp
	mov	bp, sp
	jmp	L_yak_97
	ALIGN	2
YKExitISR:
	; >>>>> Line:	340
	; >>>>> void YKExitISR(){ 
	jmp	L_yak_99
L_yak_100:
	; >>>>> Line:	341
	; >>>>> ISRDepth--; 
	dec	word [ISRDepth]
	; >>>>> Line:	342
	; >>>>> if(ISRDepth == 0){ 
	mov	ax, word [ISRDepth]
	test	ax, ax
	jne	L_yak_101
	; >>>>> Line:	343
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
L_yak_101:
	mov	sp, bp
	pop	bp
	ret
L_yak_99:
	push	bp
	mov	bp, sp
	jmp	L_yak_100
	ALIGN	2
YKTickHandler:
	; >>>>> Line:	349
	; >>>>> void YKTickHandler(){ 
	jmp	L_yak_103
L_yak_104:
	; >>>>> Line:	355
	; >>>>> YKEnterMutex(); 
	mov	ax, word [delayListHead]
	mov	word [bp-2], ax
	mov	word [bp-8], 1
	; >>>>> Line:	355
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	356
	; >>>>> YKTickNum++; 
	inc	word [YKTickNum]
	; >>>>> Line:	366
	; >>>>> delayListHead->delayCount--; 
	mov	si, word [delayListHead]
	add	si, 30
	dec	word [si]
	; >>>>> Line:	367
	; >>>>> deltaDelay++; 
	inc	word [deltaDelay]
	; >>>>> Line:	368
	; >>>>> if(delayListHead->delayCount != 0){ 
	mov	si, word [delayListHead]
	add	si, 30
	mov	ax, word [si]
	test	ax, ax
	je	L_yak_105
	; >>>>> Line:	369
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	370
	; >>>>> return; 
	jmp	L_yak_106
L_yak_105:
	; >>>>> Line:	375
	; >>>>> while(1){ 
	jmp	L_yak_108
L_yak_107:
	; >>>>> Line:	376
	; >>>>> itr = delayListHead; 
	mov	ax, word [delayListHead]
	mov	word [bp-2], ax
	; >>>>> Line:	377
	; >>>>> moveOutOfDelayList = delayListHead; 
	mov	ax, word [delayListHead]
	mov	word [bp-4], ax
	; >>>>> Line:	379
	; >>>>> if(delayListHead->nextTCB != ((void *) 0)){ 
	mov	si, word [delayListHead]
	add	si, 32
	mov	ax, word [si]
	test	ax, ax
	je	L_yak_110
	; >>>>> Line:	380
	; >>>>> delayListHead = delayListHead->nextTCB; 
	mov	si, word [delayListHead]
	add	si, 32
	mov	ax, word [si]
	mov	word [delayListHead], ax
	; >>>>> Line:	381
	; >>>>> delayListHead->prevTCB = ((void *) 0); 
	mov	si, word [delayListHead]
	add	si, 34
	mov	word [si], 0
	; >>>>> Line:	382
	; >>>>> itr = delayListHead; 
	mov	ax, word [delayListHead]
	mov	word [bp-2], ax
	; >>>>> Line:	383
	; >>>>> while(1){ 
	jmp	L_yak_112
L_yak_111:
	; >>>>> Line:	384
	; >>>>> itr->delayCount -= deltaD 
	mov	si, word [bp-2]
	add	si, 30
	mov	ax, word [deltaDelay]
	sub	word [si], ax
	; >>>>> Line:	385
	; >>>>> if(itr->nextTCB == ((void *) 0)){ 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	test	ax, ax
	jne	L_yak_114
	; >>>>> Line:	386
	; >>>>> deltaDelay = 0; 
	mov	word [deltaDelay], 0
	; >>>>> Line:	387
	; >>>>> break; 
	jmp	L_yak_113
L_yak_114:
	; >>>>> Line:	389
	; >>>>> itr = itr->nextTCB; 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yak_112:
	jmp	L_yak_111
L_yak_113:
	jmp	L_yak_115
L_yak_110:
	; >>>>> Line:	392
	; >>>>> delayListHead = ((void *) 0); 
	mov	word [delayListHead], 0
	; >>>>> Line:	393
	; >>>>> deltaDelay = 0; 
	mov	word [deltaDelay], 0
	; >>>>> Line:	394
	; >>>>> keepGoing = 0; 
	mov	word [bp-8], 0
L_yak_115:
	; >>>>> Line:	400
	; >>>>> if(readyListHead == ((void *) 0)){ 
	mov	ax, word [readyListHead]
	test	ax, ax
	jne	L_yak_116
	; >>>>> Line:	401
	; >>>>> readyListHead = moveOutOfDelayList; 
	mov	ax, word [bp-4]
	mov	word [readyListHead], ax
	; >>>>> Line:	402
	; >>>>> readyListHead->prevTCB = ((void *) 0); 
	mov	si, word [readyListHead]
	add	si, 34
	mov	word [si], 0
	; >>>>> Line:	403
	; >>>>> readyListHead->nextTCB = ((void *) 0); 
	mov	si, word [readyListHead]
	add	si, 32
	mov	word [si], 0
	; >>>>> Line:	406
	; >>>>> return; 
	jmp	L_yak_106
L_yak_116:
	; >>>>> Line:	409
	; >>>>> itr = readyListHead; 
	mov	ax, word [readyListHead]
	mov	word [bp-2], ax
	; >>>>> Line:	410
	; >>>>> while(1){ 
	jmp	L_yak_118
L_yak_117:
	; >>>>> Line:	411
	; >>>>> if(itr->taskPriority >= moveOutOfDelayList->taskPriority){ 
	mov	si, word [bp-2]
	add	si, 24
	mov	di, word [bp-4]
	add	di, 24
	mov	ax, word [di]
	cmp	ax, word [si]
	ja	L_yak_120
	; >>>>> Line:	412
	; >>>>> if(itr == readyList 
	mov	ax, word [readyListHead]
	cmp	ax, word [bp-2]
	jne	L_yak_121
	; >>>>> Line:	414
	; >>>>> itr->prevTCB = moveOutOfDelayList; 
	mov	si, word [bp-2]
	add	si, 34
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	415
	; >>>>> moveOutOfDelayList->nextTCB = itr; 
	mov	si, word [bp-4]
	add	si, 32
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	416
	; >>>>> moveOutOfDelayList->prevTCB = ((void *) 0); 
	mov	si, word [bp-4]
	add	si, 34
	mov	word [si], 0
	; >>>>> Line:	417
	; >>>>> readyListHead = moveOutOfDelayList; 
	mov	ax, word [bp-4]
	mov	word [readyListHead], ax
	; >>>>> Line:	418
	; >>>>> break; 
	jmp	L_yak_119
	jmp	L_yak_122
L_yak_121:
	; >>>>> Line:	421
	; >>>>> temp = itr->prevTCB; 
	mov	si, word [bp-2]
	add	si, 34
	mov	ax, word [si]
	mov	word [bp-6], ax
	; >>>>> Line:	422
	; >>>>> itr->prevTCB = moveOutOfDelayList; 
	mov	si, word [bp-2]
	add	si, 34
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	423
	; >>>>> moveOutOfDelayList->nextTCB = itr; 
	mov	si, word [bp-4]
	add	si, 32
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	424
	; >>>>> moveOutOfDelayList->prevTCB = temp; 
	mov	si, word [bp-4]
	add	si, 34
	mov	ax, word [bp-6]
	mov	word [si], ax
	; >>>>> Line:	425
	; >>>>> temp->nextTCB = moveOutOfDelayList; 
	mov	si, word [bp-6]
	add	si, 32
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	426
	; >>>>> break; 
	jmp	L_yak_119
L_yak_122:
L_yak_120:
	; >>>>> Line:	429
	; >>>>> if(itr->nextTCB == ((void *) 0)){ 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	test	ax, ax
	jne	L_yak_123
	; >>>>> Line:	430
	; >>>>> itr->nextTCB = moveOutOfDelayList; 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	431
	; >>>>> moveOutOfDelayList- 
	mov	si, word [bp-4]
	add	si, 34
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	432
	; >>>>> moveOutOfDelayList->nextTCB = ((void *) 0); 
	mov	si, word [bp-4]
	add	si, 32
	mov	word [si], 0
	; >>>>> Line:	433
	; >>>>> break; 
	jmp	L_yak_119
L_yak_123:
	; >>>>> Line:	436
	; >>>>> itr = itr->nextTCB; 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yak_118:
	jmp	L_yak_117
L_yak_119:
	; >>>>> Line:	438
	; >>>>> if(delayListHead->delayCount > 0 || !keepGoing){ 
	mov	si, word [delayListHead]
	add	si, 30
	mov	ax, word [si]
	test	ax, ax
	jne	L_yak_125
	mov	ax, word [bp-8]
	test	ax, ax
	jne	L_yak_124
L_yak_125:
	; >>>>> Line:	439
	; >>>>> break; 
	jmp	L_yak_109
L_yak_124:
L_yak_108:
	jmp	L_yak_107
L_yak_109:
L_yak_106:
	; >>>>> Line:	443
	; >>>>> YKExitMutex; 
	mov	sp, bp
	pop	bp
	ret
L_yak_103:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_yak_104
	ALIGN	2
YKSemCreate:
	; >>>>> Line:	446
	; >>>>> YKSEM* YKSemCreate(int initialValue){ 
	jmp	L_yak_127
L_yak_128:
	; >>>>> Line:	448
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	449
	; >>>>> YKSEMArray[YKSEMNextFree].value = initialValue; 
	mov	ax, word [YKSEMNextFree]
	shl	ax, 1
	mov	si, ax
	add	si, YKSEMArray
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	450
	; >>>>> YKSEMNextFree++; 
	inc	word [YKSEMNextFree]
	; >>>>> Line:	451
	; >>>>> returnValue = (YKSEM*)&(YKSEMArray[YKSEMNextFree - 1]); 
	mov	ax, word [YKSEMNextFree]
	dec	ax
	shl	ax, 1
	add	ax, YKSEMArray
	mov	word [bp-2], ax
	; >>>>> Line:	452
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	453
	; >>>>> return returnValue; 
	mov	ax, word [bp-2]
L_yak_129:
	mov	sp, bp
	pop	bp
	ret
L_yak_127:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yak_128
L_yak_131:
	DB	"IDLE task should not call YKSemPend!",0xD,0xA,")",0
	ALIGN	2
YKSemPend:
	; >>>>> Line:	458
	; >>>>> void YKSemPend(YKSEM *semaphore){ 
	jmp	L_yak_132
L_yak_133:
	; >>>>> Line:	460
	; >>>>> *) 0); 
	mov	ax, word [pendingListHead]
	mov	word [bp-2], ax
	; >>>>> Line:	460
	; >>>>> *) 0); 
	call	YKEnterMutex
	; >>>>> Line:	467
	; >>>>> if(semaphore->value > 0){ 
	mov	si, word [bp+4]
	cmp	word [si], 0
	jle	L_yak_134
	; >>>>> Line:	468
	; >>>>> semaphore->value--; 
	dec	word [si]
	; >>>>> Line:	469
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	470
	; >>>>> return; 
	jmp	L_yak_135
L_yak_134:
	; >>>>> Line:	473
	; >>>>> runningTCB->pendingOn = semaphore; 
	mov	si, word [runningTCB]
	add	si, 38
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	476
	; >>>>> if(runningTCB->nextTCB == ((void *) 0) && runningTCB->prevTCB == ((void *) 0)){ 
	mov	si, word [runningTCB]
	add	si, 32
	mov	ax, word [si]
	test	ax, ax
	jne	L_yak_136
	mov	si, word [runningTCB]
	add	si, 34
	mov	ax, word [si]
	test	ax, ax
	jne	L_yak_136
	; >>>>> Line:	477
	; >>>>> printString("IDLE task should not call YKSemPend!\r\n)"); 
	mov	ax, L_yak_131
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	478
	; >>>>> exit(0); 
	xor	al, al
	push	ax
	call	exit
	add	sp, 2
	jmp	L_yak_137
L_yak_136:
	; >>>>> Line:	479
	; >>>>> }else if(runningTCB == readyListHead){ 
	mov	ax, word [readyListHead]
	cmp	ax, word [runningTCB]
	jne	L_yak_138
	; >>>>> Line:	480
	; >>>>> readyListHead = runningTCB->nextTCB; 
	mov	si, word [runningTCB]
	add	si, 32
	mov	ax, word [si]
	mov	word [readyListHead], ax
	; >>>>> Line:	481
	; >>>>> readyListHead->prevTCB = ((void *) 0); 
	mov	si, word [readyListHead]
	add	si, 34
	mov	word [si], 0
	jmp	L_yak_139
L_yak_138:
	; >>>>> Line:	482
	; >>>>> }else if(runningTCB->nextTCB == ((void *) 0)){ 
	mov	si, word [runningTCB]
	add	si, 32
	mov	ax, word [si]
	test	ax, ax
	jne	L_yak_140
	; >>>>> Line:	483
	; >>>>> runningTCB->prevTCB->nextTCB = ((void *) 0); 
	mov	si, word [runningTCB]
	add	si, 34
	mov	si, word [si]
	add	si, 32
	mov	word [si], 0
	jmp	L_yak_141
L_yak_140:
	; >>>>> Line:	485
	; >>>>> tTCB 
	mov	si, word [runningTCB]
	add	si, 32
	mov	di, word [runningTCB]
	add	di, 34
	mov	di, word [di]
	add	di, 32
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	486
	; >>>>> runningTCB->nextTCB->prevTCB = runningTCB->prevTCB; 
	mov	si, word [runningTCB]
	add	si, 34
	mov	di, word [runningTCB]
	add	di, 32
	mov	di, word [di]
	add	di, 34
	mov	ax, word [si]
	mov	word [di], ax
L_yak_141:
L_yak_139:
L_yak_137:
	; >>>>> Line:	490
	; >>>>> if(pendingListHead == ((void *) 0)){ 
	mov	ax, word [pendingListHead]
	test	ax, ax
	jne	L_yak_142
	; >>>>> Line:	491
	; >>>>> pendingListHead = runningTCB; 
	mov	ax, word [runningTCB]
	mov	word [pendingListHead], ax
	; >>>>> Line:	492
	; >>>>> pendingListHead->prevTCB = ((void *) 0); 
	mov	si, word [pendingListHead]
	add	si, 34
	mov	word [si], 0
	; >>>>> Line:	493
	; >>>>> pendingListHead->nextTCB = ((void *) 0); 
	mov	si, word [pendingListHead]
	add	si, 32
	mov	word [si], 0
	; >>>>> Line:	495
	; >>>>> YKScheduler(0); 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
	; >>>>> Line:	496
	; >>>>> semaphore->value--; 
	mov	si, word [bp+4]
	dec	word [si]
	; >>>>> Line:	497
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	498
	; >>>>> return; 
	jmp	L_yak_135
L_yak_142:
	; >>>>> Line:	501
	; >>>>> while(1){ 
	jmp	L_yak_144
L_yak_143:
	; >>>>> Line:	502
	; >>>>> if(itr->nextTCB == ((void *) 0)){ 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	test	ax, ax
	jne	L_yak_146
	; >>>>> Line:	503
	; >>>>> itr->nextTCB = runningTCB; 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [runningTCB]
	mov	word [si], ax
	; >>>>> Line:	504
	; >>>>> runningTCB->prevTCB = itr; 
	mov	si, word [runningTCB]
	add	si, 34
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	505
	; >>>>> runningTCB->nextTCB = ((void *) 0); 
	mov	si, word [runningTCB]
	add	si, 32
	mov	word [si], 0
	; >>>>> Line:	506
	; >>>>> break; 
	jmp	L_yak_145
L_yak_146:
	; >>>>> Line:	508
	; >>>>> itr = itr->nextTCB 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yak_144:
	jmp	L_yak_143
L_yak_145:
	; >>>>> Line:	511
	; >>>>> YKScheduler(0); 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
	; >>>>> Line:	512
	; >>>>> semaphore->value--; 
	mov	si, word [bp+4]
	dec	word [si]
	; >>>>> Line:	513
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yak_135:
	mov	sp, bp
	pop	bp
	ret
L_yak_132:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yak_133
	ALIGN	2
YKSemPost:
	; >>>>> Line:	516
	; >>>>> void YKSemPost(YKSEM *semaphore){ 
	jmp	L_yak_148
L_yak_149:
	; >>>>> Line:	522
	; >>>>> YKEnterMutex(); 
	mov	word [bp-10], 0
	; >>>>> Line:	522
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	529
	; >>>>> semaphore->value++; 
	mov	si, word [bp+4]
	inc	word [si]
	; >>>>> Line:	533
	; >>>>> if(pendingListHead == ((void *) 0)){ 
	mov	ax, word [pendingListHead]
	test	ax, ax
	jne	L_yak_150
	; >>>>> Line:	534
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	535
	; >>>>> return; 
	jmp	L_yak_151
L_yak_150:
	; >>>>> Line:	538
	; >>>>> while(1){ 
	jmp	L_yak_153
L_yak_152:
	; >>>>> Line:	539
	; >>>>> itr = pendingListHead; 
	mov	ax, word [pendingListHead]
	mov	word [bp-2], ax
	; >>>>> Line:	540
	; >>>>> while(1){ 
	jmp	L_yak_156
L_yak_155:
	; >>>>> Line:	541
	; >>>>> if(itr == ((void *) 0)){ 
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yak_158
	; >>>>> Line:	542
	; >>>>> done = 1; 
	mov	word [bp-10], 1
	; >>>>> Line:	543
	; >>>>> break; 
	jmp	L_yak_157
L_yak_158:
	; >>>>> Line:	545
	; >>>>> if(itr->pendingOn->value > 0){ 
	mov	si, word [bp-2]
	add	si, 38
	mov	si, word [si]
	cmp	word [si], 0
	jle	L_yak_159
	; >>>>> Line:	547
	; >>>>> if(itr->nextTCB == ((void *) 0) && itr->prevTCB == ((void *) 0)){ 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	test	ax, ax
	jne	L_yak_160
	mov	si, word [bp-2]
	add	si, 34
	mov	ax, word [si]
	test	ax, ax
	jne	L_yak_160
	; >>>>> Line:	548
	; >>>>> pendingListHead = (( 
	mov	word [pendingListHead], 0
	jmp	L_yak_161
L_yak_160:
	; >>>>> Line:	549
	; >>>>> }else if(itr == pendingListHead){ 
	mov	ax, word [pendingListHead]
	cmp	ax, word [bp-2]
	jne	L_yak_162
	; >>>>> Line:	550
	; >>>>> pendingListHead = itr->nextTCB; 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	mov	word [pendingListHead], ax
	; >>>>> Line:	551
	; >>>>> pendingListHead->prevTCB = ((void *) 0); 
	mov	si, word [pendingListHead]
	add	si, 34
	mov	word [si], 0
	jmp	L_yak_163
L_yak_162:
	; >>>>> Line:	552
	; >>>>> }else if(itr->nextTCB == ((void *) 0)){ 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	test	ax, ax
	jne	L_yak_164
	; >>>>> Line:	553
	; >>>>> itr->prevTCB->nextTCB = ((void *) 0); 
	mov	si, word [bp-2]
	add	si, 34
	mov	si, word [si]
	add	si, 32
	mov	word [si], 0
	jmp	L_yak_165
L_yak_164:
	; >>>>> Line:	555
	; >>>>> itr->prevTCB->nextTCB = itr->nextTCB; 
	mov	si, word [bp-2]
	add	si, 32
	mov	di, word [bp-2]
	add	di, 34
	mov	di, word [di]
	add	di, 32
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	556
	; >>>>> itr->nextTCB->prevTCB = itr->prevTCB; 
	mov	si, word [bp-2]
	add	si, 34
	mov	di, word [bp-2]
	add	di, 32
	mov	di, word [di]
	add	di, 34
	mov	ax, word [si]
	mov	word [di], ax
L_yak_165:
L_yak_163:
L_yak_161:
	; >>>>> Line:	559
	; >>>>> temp2 = itr; 
	mov	ax, word [bp-2]
	mov	word [bp-8], ax
	; >>>>> Line:	560
	; >>>>> itr2 = readyListHead; 
	mov	ax, word [readyListHead]
	mov	word [bp-4], ax
	; >>>>> Line:	561
	; >>>>> while(1){ 
	jmp	L_yak_167
L_yak_166:
	; >>>>> Line:	562
	; >>>>> if(itr2->taskPriority >= itr->taskPriority){ 
	mov	si, word [bp-4]
	add	si, 24
	mov	di, word [bp-2]
	add	di, 24
	mov	ax, word [di]
	cmp	ax, word [si]
	ja	L_yak_169
	; >>>>> Line:	563
	; >>>>> if(itr2 == readyListHead){ 
	mov	ax, word [readyListHead]
	cmp	ax, word [bp-4]
	jne	L_yak_170
	; >>>>> Line:	564
	; >>>>> itr2->prevTCB = itr; 
	mov	si, word [bp-4]
	add	si, 34
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	565
	; >>>>> itr->nextTCB  
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	566
	; >>>>> itr->prevTCB = ((void *) 0); 
	mov	si, word [bp-2]
	add	si, 34
	mov	word [si], 0
	; >>>>> Line:	567
	; >>>>> readyListHead = itr; 
	mov	ax, word [bp-2]
	mov	word [readyListHead], ax
	; >>>>> Line:	568
	; >>>>> break; 
	jmp	L_yak_168
	jmp	L_yak_171
L_yak_170:
	; >>>>> Line:	571
	; >>>>> temp = itr2->prevTCB; 
	mov	si, word [bp-4]
	add	si, 34
	mov	ax, word [si]
	mov	word [bp-6], ax
	; >>>>> Line:	572
	; >>>>> itr2->prevTCB = itr; 
	mov	si, word [bp-4]
	add	si, 34
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	573
	; >>>>> itr->nextTCB = itr2; 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	574
	; >>>>> itr->prevTCB = temp; 
	mov	si, word [bp-2]
	add	si, 34
	mov	ax, word [bp-6]
	mov	word [si], ax
	; >>>>> Line:	575
	; >>>>> temp->nextTCB = itr; 
	mov	si, word [bp-6]
	add	si, 32
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	576
	; >>>>> break; 
	jmp	L_yak_168
L_yak_171:
L_yak_169:
	; >>>>> Line:	579
	; >>>>> if(itr2->nextTCB == ((void *) 0)){ 
	mov	si, word [bp-4]
	add	si, 32
	mov	ax, word [si]
	test	ax, ax
	jne	L_yak_172
	; >>>>> Line:	580
	; >>>>> itr2->nextTCB = itr; 
	mov	si, word [bp-4]
	add	si, 32
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	581
	; >>>>> itr->prevTCB = itr2; 
	mov	si, word [bp-2]
	add	si, 34
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	582
	; >>>>> itr->nextTCB = ((void *) 0); 
	mov	si, word [bp-2]
	add	si, 32
	mov	word [si], 0
	; >>>>> Line:	583
	; >>>>> break; 
	jmp	L_yak_168
L_yak_172:
	; >>>>> Line:	586
	; >>>>> itr2 = itr2->nextTCB; 
	mov	si, word [bp-4]
	add	si, 32
	mov	ax, word [si]
	mov	word [bp-4], ax
L_yak_167:
	jmp	L_yak_166
L_yak_168:
	; >>>>> Line:	588
	; >>>>> itr = temp2; 
	mov	ax, word [bp-8]
	mov	word [bp-2], ax
L_yak_159:
	; >>>>> Line:	590
	; >>>>> itr = itr->nextTCB; 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yak_156:
	jmp	L_yak_155
L_yak_157:
	; >>>>> Line:	592
	; >>>>> if(done) 
	mov	ax, word [bp-10]
	test	ax, ax
	je	L_yak_173
	; >>>>> Line:	593
	; >>>>> break; 
	jmp	L_yak_154
L_yak_173:
L_yak_153:
	jmp	L_yak_152
L_yak_154:
	; >>>>> Line:	597
	; >>>>> if(ISRDepth == 0){ 
	mov	ax, word [ISRDepth]
	test	ax, ax
	jne	L_yak_174
	; >>>>> Line:	598
	; >>>>> YKScheduler(0); 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
	; >>>>> Line:	599
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	600
	; >>>>> return; 
	jmp	L_yak_151
L_yak_174:
	; >>>>> Line:	603
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yak_151:
	mov	sp, bp
	pop	bp
	ret
L_yak_148:
	push	bp
	mov	bp, sp
	sub	sp, 10
	jmp	L_yak_149
	ALIGN	2
YKQCreate:
	; >>>>> Line:	607
	; >>>>> YKQ *YKQCreate(void **start, unsigned size){ 
	jmp	L_yak_176
L_yak_177:
	; >>>>> Line:	610
	; >>>>> for(i = 0; i < 15; i++){ 
	mov	word [bp-2], 0
	jmp	L_yak_179
L_yak_178:
	; >>>>> Line:	611
	; >>>>> if(!YKQArray[i].inUse){ 
	mov	ax, word [bp-2]
	mov	cx, 4
	shl	ax, cl
	add	ax, YKQArray
	mov	si, ax
	add	si, 4
	mov	ax, word [si]
	test	ax, ax
	jne	L_yak_182
	; >>>>> Line:	612
	; >>>>> YKQArray[i].inUse = 1; 
	mov	ax, word [bp-2]
	mov	cx, 4
	shl	ax, cl
	add	ax, YKQArray
	mov	si, ax
	add	si, 4
	mov	word [si], 1
	; >>>>> Line:	613
	; >>>>> break; 
	jmp	L_yak_180
L_yak_182:
L_yak_181:
	inc	word [bp-2]
L_yak_179:
	cmp	word [bp-2], 15
	jl	L_yak_178
L_yak_180:
	; >>>>> Line:	616
	; >>>>> YKQArray[i].size = size; 
	mov	ax, word [bp-2]
	mov	cx, 4
	shl	ax, cl
	add	ax, YKQArray
	mov	si, ax
	add	si, 2
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	617
	; >>>>> YKQArray[i].start = start; 
	mov	ax, word [bp-2]
	mov	cx, 4
	shl	ax, cl
	mov	si, ax
	add	si, YKQArray
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	623
	; >>>>> return &YKQArray[i]; 
	mov	ax, word [bp-2]
	mov	cx, 4
	shl	ax, cl
	add	ax, YKQArray
L_yak_183:
	mov	sp, bp
	pop	bp
	ret
L_yak_176:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yak_177
	ALIGN	2
subIndex:
	; >>>>> Line:	627
	; >>>>> static int subIndex(int index, unsigned size){ 
	jmp	L_yak_185
L_yak_186:
	; >>>>> Line:	628
	; >>>>> if((index - 1) < 0){ 
	mov	ax, word [bp+4]
	dec	ax
	test	ax, ax
	jge	L_yak_187
	; >>>>> Line:	629
	; >>>>> return size - 1; 
	mov	ax, word [bp+6]
	dec	ax
	jmp	L_yak_188
L_yak_187:
	; >>>>> Line:	631
	; >>>>> return index - 1; 
	mov	ax, word [bp+4]
	dec	ax
L_yak_188:
	mov	sp, bp
	pop	bp
	ret
L_yak_185:
	push	bp
	mov	bp, sp
	jmp	L_yak_186
	ALIGN	2
addIndex:
	; >>>>> Line:	634
	; >>>>> static int addIndex(int index, unsigned size){ 
	jmp	L_yak_190
L_yak_191:
	; >>>>> Line:	635
	; >>>>> if((inde 
	mov	ax, word [bp+4]
	inc	ax
	mov	dx, word [bp+6]
	cmp	dx, ax
	ja	L_yak_192
	; >>>>> Line:	636
	; >>>>> return 0; 
	xor	ax, ax
	jmp	L_yak_193
L_yak_192:
	; >>>>> Line:	638
	; >>>>> return index + 1; 
	mov	ax, word [bp+4]
	inc	ax
L_yak_193:
	mov	sp, bp
	pop	bp
	ret
L_yak_190:
	push	bp
	mov	bp, sp
	jmp	L_yak_191
	ALIGN	2
isQueueEmpty:
	; >>>>> Line:	641
	; >>>>> static int isQueueEmpty(YKQ* queue){ 
	jmp	L_yak_195
L_yak_196:
	; >>>>> Line:	642
	; >>>>> if(addIndex(queue->front, queue->size) == queue->rear){ 
	mov	si, word [bp+4]
	add	si, 2
	push	word [si]
	mov	si, word [bp+4]
	add	si, 10
	push	word [si]
	call	addIndex
	add	sp, 4
	mov	si, word [bp+4]
	add	si, 12
	mov	dx, word [si]
	cmp	dx, ax
	jne	L_yak_197
	; >>>>> Line:	644
	; >>>>> return 1; 
	mov	ax, 1
	jmp	L_yak_198
	jmp	L_yak_199
L_yak_197:
	; >>>>> Line:	646
	; >>>>> return 0; 
	xor	ax, ax
L_yak_199:
L_yak_198:
	mov	sp, bp
	pop	bp
	ret
L_yak_195:
	push	bp
	mov	bp, sp
	jmp	L_yak_196
	ALIGN	2
writeToAddress:
	; >>>>> Line:	649
	; >>>>> static void writeToAddress(void* data, void * addr){ 
	jmp	L_yak_201
L_yak_202:
	; >>>>> Line:	659
	; >>>>> *p_reg = data; 
	mov	ax, word [bp+6]
	mov	word [bp-2], ax
	; >>>>> Line:	659
	; >>>>> *p_reg = data; 
	mov	si, word [bp-2]
	mov	ax, word [bp+4]
	mov	word [si], ax
	mov	sp, bp
	pop	bp
	ret
L_yak_201:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yak_202
	ALIGN	2
readFromAddress:
	; >>>>> Line:	663
	; >>>>> static int readFromAddress(int addr){ 
	jmp	L_yak_204
L_yak_205:
	; >>>>> Line:	665
	; >>>>> return *p; 
	mov	ax, word [bp+4]
	mov	word [bp-2], ax
	; >>>>> Line:	665
	; >>>>> return *p; 
	mov	si, word [bp-2]
	mov	ax, word [si]
L_yak_206:
	mov	sp, bp
	pop	bp
	ret
L_yak_204:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yak_205
	ALIGN	2
pushOnQueue:
	; >>>>> Line:	670
	; >>>>> static void pushOnQueue(YKQ* queue, int* success, void* message){ 
	jmp	L_yak_208
L_yak_209:
	; >>>>> Line:	671
	; >>>>> if(addIndex(queue->rear, queue->size) == queue->front){ 
	mov	si, word [bp+4]
	add	si, 2
	push	word [si]
	mov	si, word [bp+4]
	add	si, 12
	push	word [si]
	call	addIndex
	add	sp, 4
	mov	si, word [bp+4]
	add	si, 10
	mov	dx, word [si]
	cmp	dx, ax
	jne	L_yak_210
	; >>>>> Line:	673
	; >>>>>  
	mov	si, word [bp+6]
	mov	word [si], 0
	; >>>>> Line:	674
	; >>>>> return; 
	jmp	L_yak_211
L_yak_210:
	; >>>>> Line:	677
	; >>>>> writeToAddress(message, (int)queue->start + queue->rear*sizeof(void*)); 
	mov	si, word [bp+4]
	add	si, 12
	mov	ax, word [si]
	shl	ax, 1
	mov	si, word [bp+4]
	add	ax, word [si]
	push	ax
	push	word [bp+8]
	call	writeToAddress
	add	sp, 4
	; >>>>> Line:	679
	; >>>>> queue->rear = addIndex(queue->rear, queue->size); 
	mov	si, word [bp+4]
	add	si, 2
	push	word [si]
	mov	si, word [bp+4]
	add	si, 12
	push	word [si]
	call	addIndex
	add	sp, 4
	mov	si, word [bp+4]
	add	si, 12
	mov	word [si], ax
	; >>>>> Line:	680
	; >>>>> *success = 1; 
	mov	si, word [bp+6]
	mov	word [si], 1
L_yak_211:
	; >>>>> Line:	681
	; >>>>> return; 
	mov	sp, bp
	pop	bp
	ret
L_yak_208:
	push	bp
	mov	bp, sp
	jmp	L_yak_209
	ALIGN	2
popOffQueue:
	; >>>>> Line:	685
	; >>>>> static void popOffQueue(YKQ* queue, int* success, void** result){ 
	jmp	L_yak_213
L_yak_214:
	; >>>>> Line:	687
	; >>>>> if(queue->front == queue->rear){ 
	mov	si, word [bp+4]
	add	si, 10
	mov	di, word [bp+4]
	add	di, 12
	mov	ax, word [di]
	cmp	ax, word [si]
	jne	L_yak_215
	; >>>>> Line:	689
	; >>>>> *success = 0; 
	mov	si, word [bp+6]
	mov	word [si], 0
	; >>>>> Line:	690
	; >>>>> return; 
	jmp	L_yak_216
L_yak_215:
	; >>>>> Line:	693
	; >>>>> *result = (void*)readFromAddress((int)queue->start + queue->front*sizeof(void*)); 
	mov	si, word [bp+4]
	add	si, 10
	mov	ax, word [si]
	shl	ax, 1
	mov	si, word [bp+4]
	add	ax, word [si]
	push	ax
	call	readFromAddress
	add	sp, 2
	mov	si, word [bp+8]
	mov	word [si], ax
	; >>>>> Line:	701
	; >>>>> queue->front = addIndex(queue->front, queue->size); 
	mov	si, word [bp+4]
	add	si, 2
	push	word [si]
	mov	si, word [bp+4]
	add	si, 10
	push	word [si]
	call	addIndex
	add	sp, 4
	mov	si, word [bp+4]
	add	si, 10
	mov	word [si], ax
	; >>>>> Line:	702
	; >>>>> *success = 1; 
	mov	si, word [bp+6]
	mov	word [si], 1
L_yak_216:
	; >>>>> Line:	703
	; >>>>> return; 
	mov	sp, bp
	pop	bp
	ret
L_yak_213:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yak_214
L_yak_223:
	DB	" Data: ",0
L_yak_222:
	DB	" inUse: ",0
L_yak_221:
	DB	" rear: ",0
L_yak_220:
	DB	" front: ",0
L_yak_219:
	DB	" size: ",0
L_yak_218:
	DB	"Queue contents: id: ",0
	ALIGN	2
printQueue:
	; >>>>> Line:	706
	; >>>>> se a non initialized que 
	jmp	L_yak_224
L_yak_225:
	; >>>>> Line:	707
	; >>>>> printString("Queue contents: id: "); 
	mov	ax, L_yak_218
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	708
	; >>>>> printInt(queue->id); 
	mov	si, word [bp+4]
	add	si, 6
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	709
	; >>>>> printString(" size: "); 
	mov	ax, L_yak_219
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	710
	; >>>>> printInt(queue->size); 
	mov	si, word [bp+4]
	add	si, 2
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	711
	; >>>>> printString(" front: "); 
	mov	ax, L_yak_220
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	712
	; >>>>> printInt(queue->front); 
	mov	si, word [bp+4]
	add	si, 10
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	713
	; >>>>> printString(" rear: "); 
	mov	ax, L_yak_221
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	714
	; >>>>> printInt(queue->rear); 
	mov	si, word [bp+4]
	add	si, 12
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	715
	; >>>>> printString(" inUse: "); 
	mov	ax, L_yak_222
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	716
	; >>>>> printInt(queue->inUse); 
	mov	si, word [bp+4]
	add	si, 4
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	717
	; >>>>> printString(" Data: "); 
	mov	ax, L_yak_223
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	718
	; >>>>> printInt((int)queue->start); 
	mov	si, word [bp+4]
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	719
	; >>>>> printString("\r\n"); 
	mov	ax, L_yak_4
	push	ax
	call	printString
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_yak_224:
	push	bp
	mov	bp, sp
	jmp	L_yak_225
L_yak_228:
	DB	"Failed to pop even after pending!!!!",0xD,0xA,0
L_yak_227:
	DB	"Trying to use a non initialized queue!!!!",0xD,0xA,0
	ALIGN	2
YKQPend:
	; >>>>> Line:	722
	; >>>>> void *YKQPend(YKQ *queue){ 
	jmp	L_yak_229
L_yak_230:
	; >>>>> Line:	725
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	730
	; >>>>> if(!queue->inUse){ 
	mov	si, word [bp+4]
	add	si, 4
	mov	ax, word [si]
	test	ax, ax
	jne	L_yak_231
	; >>>>> Line:	731
	; >>>>> printString("Trying to use a non initialized que 
	mov	ax, L_yak_227
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	732
	; >>>>> exit(0); 
	xor	al, al
	push	ax
	call	exit
	add	sp, 2
L_yak_231:
	; >>>>> Line:	734
	; >>>>> popOffQueue(queue, &success, &tempMessage); 
	lea	ax, [bp-2]
	push	ax
	lea	ax, [bp-4]
	push	ax
	push	word [bp+4]
	call	popOffQueue
	add	sp, 6
	; >>>>> Line:	736
	; >>>>> if(!success){ 
	mov	ax, word [bp-4]
	test	ax, ax
	jne	L_yak_232
	; >>>>> Line:	742
	; >>>>> queue->numberPendingOn++; 
	mov	si, word [bp+4]
	add	si, 14
	inc	word [si]
	; >>>>> Line:	743
	; >>>>> YKSemPend(queue->semaphore); 
	mov	si, word [bp+4]
	add	si, 8
	push	word [si]
	call	YKSemPend
	add	sp, 2
	; >>>>> Line:	744
	; >>>>> popOffQueue(queue, &success, &tempMessage); 
	lea	ax, [bp-2]
	push	ax
	lea	ax, [bp-4]
	push	ax
	push	word [bp+4]
	call	popOffQueue
	add	sp, 6
	; >>>>> Line:	745
	; >>>>> if(!success){ 
	mov	ax, word [bp-4]
	test	ax, ax
	jne	L_yak_233
	; >>>>> Line:	746
	; >>>>> printString("Failed to pop even after pending!!!!\r\n"); 
	mov	ax, L_yak_228
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	747
	; >>>>> exit(0); 
	xor	al, al
	push	ax
	call	exit
	add	sp, 2
L_yak_233:
L_yak_232:
	; >>>>> Line:	752
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	753
	; >>>>> return tempMessage; 
	mov	ax, word [bp-2]
L_yak_234:
	mov	sp, bp
	pop	bp
	ret
L_yak_229:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yak_230
	ALIGN	2
YKQPost:
	; >>>>> Line:	757
	; >>>>> int YKQPost(YKQ *queue, void *msg){ 
	jmp	L_yak_236
L_yak_237:
	; >>>>> Line:	762
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	769
	; >>>>> if(!queue->inUse){ 
	mov	si, word [bp+4]
	add	si, 4
	mov	ax, word [si]
	test	ax, ax
	jne	L_yak_238
	; >>>>> Line:	770
	; >>>>> printString("Trying to use a non initialized queue!!!!\r\n"); 
	mov	ax, L_yak_227
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	771
	; >>>>> exit(0); 
	xor	al, al
	push	ax
	call	exit
	add	sp, 2
L_yak_238:
	; >>>>> Line:	773
	; >>>>> pushOnQueue(queue, &success, msg); 
	push	word [bp+6]
	lea	ax, [bp-2]
	push	ax
	push	word [bp+4]
	call	pushOnQueue
	add	sp, 6
	; >>>>> Line:	774
	; >>>>> if(success){ 
	mov	ax, word [bp-2]
	test	ax, ax
	je	L_yak_239
	; >>>>> Line:	776
	; >>>>> if(queue->numberPendingOn > 0){ 
	mov	si, word [bp+4]
	add	si, 14
	cmp	word [si], 0
	jle	L_yak_240
	; >>>>> Line:	777
	; >>>>> queue->numberPendingOn--; 
	mov	si, word [bp+4]
	add	si, 14
	dec	word [si]
	; >>>>> Line:	778
	; >>>>> YKSemPost(queue->semaphore); 
	mov	si, word [bp+4]
	add	si, 8
	push	word [si]
	call	YKSemPost
	add	sp, 2
L_yak_240:
	; >>>>> Line:	780
	; >>>>> if(ISRDepth == 0){ 
	mov	ax, word [ISRDepth]
	test	ax, ax
	jne	L_yak_241
	; >>>>> Line:	781
	; >>>>> YKScheduler(0); 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
L_yak_241:
	; >>>>> Line:	783
	; >>>>> return 1; 
	mov	ax, 1
	jmp	L_yak_242
L_yak_239:
	; >>>>> Line:	786
	; >>>>> if(ISRDepth == 0){ 
	mov	ax, word [ISRDepth]
	test	ax, ax
	jne	L_yak_243
	; >>>>> Line:	787
	; >>>>> YKScheduler(0); 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
L_yak_243:
	; >>>>> Line:	789
	; >>>>> return 0; 
	xor	ax, ax
L_yak_242:
	mov	sp, bp
	pop	bp
	ret
L_yak_236:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yak_237
	ALIGN	2
runTest:
	; >>>>> Line:	792
	; >>>>> void runTest(){ 
	jmp	L_yak_245
L_yak_246:
	; >>>>> Line:	795
	; >>>>> } 
	mov	sp, bp
	pop	bp
	ret
L_yak_245:
	push	bp
	mov	bp, sp
	jmp	L_yak_246
	ALIGN	2
YKCtxSwCount:
	TIMES	2 db 0
TCBArray:
	TIMES	600 db 0
YKSEMArray:
	TIMES	60 db 0
YKQArray:
	TIMES	240 db 0
IdleStk:
	TIMES	4096 db 0
returnToLocation:
	TIMES	2 db 0
runningTCB:
	TIMES	2 db 0
nextTCB:
	TIMES	2 db 0
dispatcher:	

	;Save context of registers (exept for sp)
	cli
	pushf
	push cs


	mov [returnToLocation], bp
	mov bp, sp
	push word[bp + 4] ;Save return address	

	mov bp, [returnToLocation]

	push ax
	push bx
	push cx
	push dx
	push si
	push di
	push es
	push ds
	push bp

	;Save sp in TCB
	mov bx, word[runningTCB]
	mov word[bx + 2], sp 
 


	;set bx to TCB to restore
	mov bx, word[nextTCB]

	;Get new stack 
	mov sp, word[bx + 2]

	;Restore registers
	pop bp
	pop ds
	pop es
	pop di
	pop si
	pop dx
	pop cx
	pop bx
	pop ax

	push bx
	mov bx, word[nextTCB]
	mov word[runningTCB], bx
	pop bx

	;The next thing on the stack is now the return address

	iret

dispatchHelperFirst:
	;Don't save anything, just dispatch nextTCB
	;Saving context would save the context from main and that's bad
	mov bx, word[nextTCB]
	
	;Get the task's stack
	mov sp, word[bx + 2]
	mov bp, sp
	
	;Push the return address, we'll use flags and cs from main for now
	pushf
	push cs
	push word[bx]
	
	iret
	

initializeStack:
	push bp
	push bx
	mov bp, sp

	mov bx, word[runningTCB]
	mov sp, word[bx + 2]

	;pushf
	push word[0x200]

	push cs

	;Push starting address
	push word[bx]

	push ax
	push bx
	push cx
	push dx
	push si
	push di
	push es
	push ds
	push bp
	
	mov bx, word[runningTCB]
	mov word[bx + 2], sp
	
	mov sp, bp
	pop bx	
	pop bp
	ret


YKEnterMutex:
	cli
	ret
YKReturn:
	pop cx
	ret
	

YKExitMutex:
	push cx	
	mov cx, [isRunning]
	cmp cx, 0
	jp YKReturn
	pop cx
	sti
	ret
